00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/23/2016 12:42:22 AM

00000000  =0000A000                  1  stack            EQU      $A000
00000000                             2  
00000000  =0000EF28                  3  example          EQU      %1110111100101000    * I made up bits 0 to 11      
00000000                             4  
00000000  =0000000C                  5  shift            EQU     12                    * Shift 12 bits 
00000000                             6  
00000000                             7   
00000000                             8  
00000000                             9  * Program starts here
00000000                            10  
00000000                            11   
00000000                            12  
00000400                            13                   ORG     $400
00000400                            14  
00000400  4FF9 0000A000             15  start            LEA     stack,SP        *Load the SP
00000406                            16  
00000406  41F9 00000420             17                   LEA     jmp_table,A0    *Index into the table
0000040C                            18  
0000040C  4280                      19                   CLR.L   D0              *Zero it
0000040E                            20  
0000040E  303C EF28                 21                   MOVE.W  #example,D0     *We'll play with it here
00000412                            22  
00000412  123C 000C                 23                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
00000416                            24  
00000416  E268                      25                   LSR.W   D1,D0           *Move the bits
00000418                            26  
00000418                            27  *
00000418                            28  
00000418                            29  * Consider the next instruction. Why do we have to multiply the index 
00000418                            30  
00000418                            31  * by 6? How many bytes does a single jump table entry require? 
00000418                            32  
00000418                            33   
00000418                            34  
00000418  C0FC 0006                 35                 MULU        #6,D0       *Form offset     
0000041C                            36  
0000041C  4EB0 0000                 37                 JSR          0(A0,D0)   *Jump indirect with index
00000420                            38  
00000420                            39                      
00000420                            40  
00000420  4EF9 00000480             41  jmp_table      JMP         code0000
00000426                            42  
00000426  4EF9 00000484             43                 JMP         code0001
0000042C                            44  
0000042C  4EF9 00000488             45                 JMP         code0010
00000432                            46  
00000432  4EF9 0000048C             47                 JMP         code0011
00000438                            48  
00000438  4EF9 00000490             49                 JMP         code0100
0000043E                            50  
0000043E  4EF9 00000494             51                 JMP         code0101
00000444                            52  
00000444  4EF9 00000498             53                 JMP         code0110
0000044A                            54  
0000044A  4EF9 0000049C             55                 JMP         code0111
00000450                            56  
00000450  4EF9 000004A0             57                 JMP         code1000
00000456                            58  
00000456  4EF9 000004A4             59                 JMP         code1001
0000045C                            60  
0000045C  4EF9 000004A8             61                 JMP         code1010
00000462                            62  
00000462  4EF9 000004AC             63                 JMP         code1011
00000468                            64  
00000468  4EF9 000004AE             65                 JMP         code1100
0000046E                            66  
0000046E  4EF9 000004B2             67                 JMP         code1101
00000474                            68  
00000474  4EF9 000004B6             69                 JMP         code1110
0000047A                            70  
0000047A  4EF9 000004BA             71                 JMP         code1111
00000480                            72  
00000480                            73          
00000480                            74  
00000480                            75   
00000480                            76  
00000480                            77  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
00000480                            78  
00000480                            79   
00000480                            80  
00000480                            81   
00000480                            82  
00000480  4E72 2700                 83  code0000       STOP        #$2700
00000484                            84  
00000484  6000 0292                 85  code0001       BRA         MOVEB
00000488                            86  
00000488  6000 02A8                 87  code0010       BRA         MOVEW
0000048C                            88  
0000048C  6000 02D6                 89  code0011       BRA         MOVEL
00000490                            90  
00000490  4E72 2700                 91  code0100       STOP        #$2700
00000494                            92  
00000494  4E72 2700                 93  code0101       STOP        #$2700
00000498                            94  
00000498  4E72 2700                 95  code0110       STOP        #$2700
0000049C                            96  
0000049C  4E72 2700                 97  code0111       STOP        #$2700
000004A0                            98  
000004A0  4E72 2700                 99  code1000       STOP        #$2700
000004A4                           100  
000004A4  4E72 2700                101  code1001       STOP        #$2700
000004A8                           102  
000004A8  4E72 2700                103  code1010       STOP        #$2700
000004AC                           104  
000004AC                           105   
000004AC                           106  
000004AC                           107  * Next we put in the next level of decoding. I just stuck this BRA
000004AC                           108  
000004AC                           109  * instruction here so it would look different. If this was your real
000004AC                           110  
000004AC                           111  * code, you would decode to the next level. Perhaps this would be
000004AC                           112  
000004AC                           113   * another jump table to the 8 possible op-codes at the next level.
000004AC                           114  
000004AC                           115   
000004AC                           116  
000004AC  60FE                     117  code1011       BRA        code1011
000004AE                           118  
000004AE  4E72 2700                119  code1100       STOP        #$2700
000004B2                           120  
000004B2  6000 000A                121  code1101       BRA         ADD_ADDA       *#$2700
000004B6                           122  
000004B6  6000 0028                123  code1110       BRA         SHIFTS
000004BA                           124  
000004BA  4E72 2700                125  code1111       STOP        #$2700
000004BE                           126  
000004BE                           127  
000004BE                           128  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
000004BE                           129                
000004BE  4280                     130                   CLR.L D0                *clear D0
000004C0                           131                   
000004C0  4281                     132                   CLR.L D1                *clear D1
000004C2                           133                   
000004C2  303C EF28                134                   MOVE.W  #example,D0     *D0 is the binary value to decode
000004C6                           135  
000004C6  123C 0008                136                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000004CA                           137  
000004CA  E368                     138                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000004CC                           139                   
000004CC  123C 000E                140                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
000004D0                           141  
000004D0  E268                     142                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000004D2                           143                                              
000004D2  B03C 0003                144                   CMP.B    #$3, D0        *if D0 holds 3, the opcode is ADDA
000004D6                           145                   
000004D6  6700 002C                146                   BEQ      ADDR_CODE
000004DA                           147                   
000004DA  4EF9 00000504            148                   JMP      ADD_CODE
000004E0                           149                   
000004E0  4280                     150  SHIFTS           CLR.L D0
000004E2                           151  
000004E2  4281                     152                   CLR.L D1
000004E4                           153                   
000004E4  303C EF28                154                   MOVE.W #example,D0
000004E8                           155                   
000004E8  E948                     156                   LSL.W #4,D0            *shift out the opcode
000004EA                           157                   
000004EA  123C 000D                158                   MOVE.B #13,D1          
000004EE                           159                   
000004EE  E268                     160                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
000004F0                           161                   
000004F0  B03C 0001                162                   CMP.B #1,D0            
000004F4                           163                   
000004F4  6700 000E                164                   BEQ LSD                *if the bits are 1, it is a logical shift
000004F8                           165                   
000004F8  B03C 0003                166                   CMP.B #3,D0
000004FC                           167                   
000004FC  6700 008E                168                   BEQ ROD                *if the bits are 3, it is a rotation
00000500                           169                   
00000500  6000 0112                170                   BRA ASD                *if it is not equal to 1 or 3, it is arithmetic shift
00000504                           171                   
00000504                           172  ADDR_CODE  
00000504                           173       *need to error check 
00000504                           174  
00000504                           175  ADD_CODE 
00000504                           176      *JMP ADD_ADDA
00000504                           177      *need to error check 
00000504                           178  
00000504  4280                     179  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00000506                           180                   
00000506  4281                     181                   CLR.L D1
00000508                           182                   
00000508  303C EF28                183                   MOVE.W #example,D0
0000050C                           184                   
0000050C  E148                     185                   LSL.W #8,D0
0000050E                           186                   
0000050E  123C 000E                187                   MOVE.B #14,D1
00000512                           188                   
00000512  E268                     189                   LSR.W D1,D0
00000514                           190                   
00000514  B03C 0003                191                   CMP.B #3,D0            *need to check the two bits after the direction 
00000518                           192                   
00000518  6600 00FA                193                   BNE ASD                *if the two bits are not 3, it is an arithmetic shift
0000051C                           194                   
0000051C  203C 0000EF28            195                   MOVE.L #example, D0
00000522                           196                   
00000522  EF48                     197                   LSL.W  #7, D0
00000524                           198                   
00000524  123C 000F                199                   MOVE.B #15, D1
00000528                           200                   
00000528  E268                     201                   LSR.W  D1, D0
0000052A                           202                   
0000052A  B03C 0001                203                   CMP.B  #1, D0
0000052E                           204                   
0000052E  6700 0006                205                   BEQ LSL
00000532                           206                   
00000532  6000 0028                207                   BRA LSR
00000536                           208                   
00000536                           209  
00000536                           210  LSL
00000536  43F9 00000ABE            211                   LEA LSL_MESSAGE, A1    * print message
0000053C                           212                   
0000053C  103C 000E                213                   MOVE.B #14, D0
00000540                           214                   
00000540  4E4F                     215                   TRAP #15
00000542                           216              
00000542  203C 0000EF28            217                   MOVE.L #example, D0
00000548                           218                   
00000548  E148                     219                   LSL.W #8, D0
0000054A                           220                   
0000054A  123C 000E                221                   MOVE.B #14, D1
0000054E                           222                   
0000054E  E268                     223                   LSR.W D1, D0
00000550                           224                   
00000550  B03C 0003                225                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00000554                           226                   
00000554  6700 002C                227                   BEQ LSD_MEMORY
00000558                           228                   
00000558  6000 012A                229                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000055C                           230  
0000055C                           231  LSR              
0000055C  43F9 00000ACA            232                   LEA LSR_MESSAGE, A1            * print message
00000562                           233                   
00000562  103C 000E                234                   MOVE.B #14, D0
00000566                           235                   
00000566  4E4F                     236                   TRAP #15
00000568                           237          
00000568  203C 0000EF28            238                   MOVE.L #example, D0
0000056E                           239                   
0000056E  E148                     240                   LSL.W #8, D0
00000570                           241                   
00000570  123C 000E                242                   MOVE.B #14, D1
00000574                           243                   
00000574  E268                     244                   LSR.W D1, D0
00000576                           245                   
00000576  B03C 0003                246                   CMP.B  #%11, D0            * check to see if memory shift
0000057A                           247                   
0000057A  6700 0006                248                   BEQ LSD_MEMORY
0000057E                           249                   
0000057E  6000 0104                250                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00000582                           251                   
00000582                           252  LSD_MEMORY
00000582  4EB9 000006EC            253                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000588                           254                   
00000588  6000 0432                255                   BRA DONE
0000058C                           256              
0000058C                           257  
0000058C  4280                     258  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
0000058E                           259                   
0000058E  4281                     260                   CLR.L D1
00000590                           261                   
00000590  303C EF28                262                   MOVE.W #example,D0
00000594                           263                   
00000594  E148                     264                   LSL.W #8,D0
00000596                           265                   
00000596  123C 000E                266                   MOVE.B #14,D1
0000059A                           267                   
0000059A  E268                     268                   LSR.W D1,D0
0000059C                           269                   
0000059C  B03C 0003                270                   CMP.B #3,D0
000005A0                           271                   
000005A0  6600 0072                272                   BNE ASD
000005A4                           273                   
000005A4  203C 0000EF28            274                   MOVE.L #example, D0
000005AA                           275                   
000005AA  EF48                     276                   LSL.W  #7, D0
000005AC                           277                   
000005AC  123C 000F                278                   MOVE.B #15, D1
000005B0                           279                   
000005B0  E268                     280                   LSR.W  D1, D0
000005B2                           281                   
000005B2  B03C 0001                282                   CMP.B  #1, D0
000005B6                           283                   
000005B6  6700 0006                284                   BEQ ROL
000005BA                           285                   
000005BA  6000 0028                286                   BRA ROR
000005BE                           287  
000005BE                           288  ROL              
000005BE  43F9 00000AC6            289                   LEA ROL_MESSAGE, A1
000005C4                           290                   
000005C4  103C 000E                291                   MOVE.B #14, D0
000005C8                           292                   
000005C8  4E4F                     293                   TRAP #15
000005CA                           294  
000005CA  203C 0000EF28            295                   MOVE.L #example, D0
000005D0                           296                   
000005D0  E148                     297                   LSL.W #8, D0
000005D2                           298                   
000005D2  123C 000E                299                   MOVE.B #14, D1
000005D6                           300                   
000005D6  E268                     301                   LSR.W D1, D0
000005D8                           302                   
000005D8  B03C 0003                303                   CMP.B  #%11, D0            * check to see if its memory shift
000005DC                           304                   
000005DC  6700 002C                305                   BEQ ROD_MEMORY
000005E0                           306                   
000005E0  6000 00A2                307                   BRA PRINTOUT_REGISTER_SHIFTS_EA
000005E4                           308  
000005E4                           309  ROR       
000005E4  43F9 00000AD2            310                   LEA ROR_MESSAGE, A1
000005EA                           311                   
000005EA  103C 000E                312                   MOVE.B #14, D0
000005EE                           313                   
000005EE  4E4F                     314                   TRAP #15
000005F0                           315                   
000005F0  203C 0000EF28            316                   MOVE.L #example, D0
000005F6                           317                   
000005F6  E148                     318                   LSL.W #8, D0
000005F8                           319                   
000005F8  123C 000E                320                   MOVE.B #14, D1
000005FC                           321                   
000005FC  E268                     322                   LSR.W D1, D0
000005FE                           323                   
000005FE  B03C 0003                324                   CMP.B  #%11, D0            * check to see if its memory shift
00000602                           325                   
00000602  6700 0006                326                   BEQ ROD_MEMORY
00000606                           327                   
00000606  6000 007C                328                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000060A                           329  
0000060A                           330  ROD_MEMORY       
0000060A  4EB9 000006EC            331                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000610                           332                   
00000610  6000 03AA                333                   BRA DONE
00000614                           334                   
00000614                           335                   
00000614  203C 0000EF28            336  ASD              MOVE.L #example, D0
0000061A                           337                   
0000061A  EF48                     338                   LSL.W  #7, D0
0000061C                           339                   
0000061C  123C 000F                340                   MOVE.B #15, D1
00000620                           341                   
00000620  E268                     342                   LSR.W  D1, D0
00000622                           343                   
00000622  B03C 0001                344                   CMP.B  #1, D0
00000626                           345                   
00000626  6700 0006                346                   BEQ ASL
0000062A                           347                   
0000062A  6000 0028                348                   BRA ASR
0000062E                           349                   
0000062E                           350  ASL
0000062E  43F9 00000AC2            351                   LEA ASL_MESSAGE, A1
00000634                           352                   
00000634  103C 000E                353                   MOVE.B #14, D0
00000638                           354                   
00000638  4E4F                     355                   TRAP #15
0000063A                           356                   
0000063A  203C 0000EF28            357                   MOVE.L #example, D0
00000640                           358                   
00000640  E148                     359                   LSL.W #8, D0
00000642                           360                   
00000642  123C 000E                361                   MOVE.B #14, D1
00000646                           362                   
00000646  E268                     363                   LSR.W D1, D0
00000648                           364                   
00000648  B03C 0003                365                   CMP.B  #%11, D0            * check to see if its memory shift
0000064C                           366                   
0000064C  6700 002C                367                   BEQ ASD_MEMORY
00000650                           368                   
00000650  6000 0032                369                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00000654                           370                                    
00000654                           371  
00000654                           372  ASR              
00000654  43F9 00000ACE            373                   LEA ASR_MESSAGE, A1
0000065A                           374                   
0000065A  103C 000E                375                   MOVE.B #14, D0
0000065E                           376                   
0000065E  4E4F                     377                   TRAP #15
00000660                           378                   
00000660  203C 0000EF28            379                   MOVE.L #example, D0
00000666                           380                   
00000666  E148                     381                   LSL.W #8, D0
00000668                           382                   
00000668  123C 000E                383                   MOVE.B #14, D1
0000066C                           384                   
0000066C  E268                     385                   LSR.W D1, D0
0000066E                           386                   
0000066E  B03C 0003                387                   CMP.B  #%11, D0            * check to see if its memory shift
00000672                           388                   
00000672  6700 0006                389                   BEQ ASD_MEMORY
00000676                           390                   
00000676  6000 000C                391                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000067A                           392  
0000067A                           393  ASD_MEMORY
0000067A  4EB9 000006EC            394                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000680                           395                   
00000680  6000 033A                396                   BRA DONE
00000684                           397                   
00000684                           398  PRINTOUT_REGISTER_SHIFTS_EA
00000684  203C 0000EF28            399                   MOVE.L #example, D0
0000068A                           400                   
0000068A  123C 000A                401                   MOVE.B #10, D1
0000068E                           402                   
0000068E  E368                     403                   LSL.W D1, D0
00000690                           404                   
00000690  123C 000F                405                   MOVE.B #15, D1
00000694                           406                   
00000694  E268                     407                   LSR.W D1, D0
00000696                           408                   
00000696  B03C 0001                409                   CMP.B #1, D0
0000069A                           410                   
0000069A  6700 002C                411                   BEQ PRINTOUT_REGISTER
0000069E                           412                   
0000069E  6000 0002                413                   BRA PRINTOUT_COUNT
000006A2                           414  
000006A2                           415                   
000006A2                           416  PRINTOUT_COUNT
000006A2  43F9 00000AE8            417                   LEA POUND_SIGN, A1
000006A8                           418  
000006A8  103C 000E                419                   MOVE.B #14, D0
000006AC                           420  
000006AC  4E4F                     421                   TRAP #15     
000006AE                           422                 
000006AE  203C 0000EF28            423                   MOVE.L #example, D0
000006B4                           424                   
000006B4  E948                     425                   LSL.W #4, D0
000006B6                           426                   
000006B6  123C 000C                427                   MOVE.B #12, D1
000006BA                           428                   
000006BA  E368                     429                   LSL.W D1, D0
000006BC                           430                   
000006BC  1200                     431                   MOVE.B D0, D1
000006BE                           432                   
000006BE  103C 0003                433                   MOVE.B #3, D0
000006C2                           434                   
000006C2  4E4F                     435                   TRAP #15                  * print out the amount that the ea is being shifted by
000006C4                           436                   
000006C4  6000 02F6                437                   BRA DONE
000006C8                           438  
000006C8                           439  PRINTOUT_REGISTER
000006C8  203C 0000EF28            440                   MOVE.L #example, D0
000006CE                           441                   
000006CE  E948                     442                   LSL.W #4, D0
000006D0                           443                   
000006D0  123C 000D                444                   MOVE.B #13, D1
000006D4                           445                   
000006D4  E268                     446                   LSR.W D1, D0
000006D6                           447                   
000006D6  1E00                     448                   MOVE.B D0, D7
000006D8                           449                   
000006D8  1C3C 0000                450                   MOVE.B #%000, D6
000006DC                           451                   
000006DC  4EB9 000007CA            452                   JSR PRINT_EA                  * to print out the data register
000006E2                           453                   
000006E2  4EB9 000006EC            454                   JSR PRINTOUT_MEMORY_SHIFTS_EA * to print out the ea that is being shifted
000006E8                           455                   
000006E8  6000 02D2                456                   BRA DONE
000006EC                           457                                   
000006EC                           458  
000006EC                           459  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
000006EC  203C 0000EF28            460                   MOVE.L #example, D0
000006F2                           461                   
000006F2  123C 000A                462                   MOVE.B #10, D1
000006F6                           463                   
000006F6  E368                     464                   LSL.W D1, D0
000006F8                           465                   
000006F8  123C 000D                466                   MOVE.B #13, D1
000006FC                           467                   
000006FC  E268                     468                   LSR.W D1, D0
000006FE                           469                   
000006FE  1C00                     470                   MOVE.B D0, D6
00000700                           471                   
00000700  203C 0000EF28            472                   MOVE.L #example, D0
00000706                           473                   
00000706  123C 000D                474                   MOVE.B #13, D1
0000070A                           475                   
0000070A  E368                     476                   LSL.W D1, D0
0000070C                           477                   
0000070C  E268                     478                   LSR.W D1, D0
0000070E                           479                   
0000070E  1E00                     480                   MOVE.B D0, D7
00000710                           481                   
00000710  4EB9 000007CA            482                   JSR PRINT_EA
00000716                           483                   
00000716  4E75                     484                   RTS
00000718                           485                  
00000718                           486                
00000718  43F9 00000A36            487  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
0000071E                           488  
0000071E  4280                     489                   CLR.L  D0
00000720                           490                   
00000720  103C 000E                491                   MOVE.B #14, D0
00000724                           492                   
00000724  4E4F                     493                   TRAP #15
00000726                           494                   
00000726  43F9 00000AD6            495                   LEA SIZE_B_PRINT, A1
0000072C                           496                   
0000072C  4E4F                     497                   TRAP #15               * done printing opcode and size
0000072E                           498                   
0000072E  6000 028C                499                   BRA DONE
00000732                           500  
00000732  4280                     501  MOVEW            CLR.L D0
00000734                           502                   
00000734  4281                     503                   CLR.L D1
00000736                           504                   
00000736  303C EF28                505                   MOVE.W #example,D0
0000073A                           506                   
0000073A  EF48                     507                   LSL.W #7,D0
0000073C                           508                   
0000073C  123C 000D                509                   MOVE.B #13,D1
00000740                           510                   
00000740  E268                     511                   LSR.W D1,D0
00000742                           512                   
00000742  B03C 0001                513                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00000746                           514                   
00000746  6700 004E                515                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
0000074A                           516                   
0000074A  43F9 00000A36            517                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00000750                           518                   
00000750  4280                     519                   CLR.L D0
00000752                           520                   
00000752  103C 000E                521                   MOVE.B #14, D0
00000756                           522                   
00000756  4E4F                     523                   TRAP #15
00000758                           524                   
00000758  43F9 00000ADC            525                   LEA SIZE_W_PRINT, A1
0000075E                           526                   
0000075E  4E4F                     527                   TRAP #15               * done printing opcode and size
00000760                           528                      
00000760  6000 025A                529                   BRA DONE
00000764                           530                
00000764                           531  
00000764  4280                     532  MOVEL            CLR.L D0
00000766                           533                   
00000766  4281                     534                   CLR.L D1
00000768                           535                   
00000768  303C EF28                536                   MOVE.W #example,D0
0000076C                           537                   
0000076C  EF48                     538                   LSL.W #7,D0
0000076E                           539                   
0000076E  123C 000D                540                   MOVE.B #13,D1
00000772                           541                   
00000772  E268                     542                   LSR.W D1,D0
00000774                           543                   
00000774  B03C 0001                544                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00000778                           545                   
00000778  6700 0036                546                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
0000077C                           547                   
0000077C  43F9 00000A36            548                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00000782                           549                   
00000782  4280                     550                   CLR.L D0
00000784                           551                   
00000784  103C 000E                552                   MOVE.B #14, D0
00000788                           553                   
00000788  4E4F                     554                   TRAP #15
0000078A                           555                   
0000078A  43F9 00000AE2            556                   LEA SIZE_L_PRINT, A1
00000790                           557                   
00000790  4E4F                     558                   TRAP #15               * done printing opcode and size
00000792                           559                   
00000792  6000 0228                560                   BRA DONE
00000796                           561                   
00000796                           562                   
00000796  43F9 00000A2F            563  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
0000079C                           564  
0000079C  4280                     565                   CLR.L D0
0000079E                           566                   
0000079E  103C 000E                567                   MOVE.B #14, D0
000007A2                           568                   
000007A2  4E4F                     569                   TRAP #15
000007A4                           570                   
000007A4  43F9 00000ADC            571                   LEA SIZE_W_PRINT, A1
000007AA                           572                   
000007AA  4E4F                     573                   TRAP #15               * done printing out opcode and size
000007AC                           574                   
000007AC  6000 020E                575                   BRA DONE
000007B0                           576  
000007B0  43F9 00000A2F            577  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
000007B6                           578  
000007B6  4280                     579                   CLR.L D0
000007B8                           580                   
000007B8  103C 000E                581                   MOVE.B #14, D0
000007BC                           582                   
000007BC  4E4F                     583                   TRAP #15
000007BE                           584                   
000007BE  43F9 00000AE2            585                   LEA SIZE_L_PRINT, A1
000007C4                           586                   
000007C4  4E4F                     587                   TRAP #15               * done printing out opcode and size
000007C6                           588                   
000007C6  6000 01F4                589                   BRA DONE               
000007CA                           590              
000007CA                           591  
000007CA                           592              *INCLUDE 'MESSAGE_Data.X68'
000007CA                           593              INCLUDE 'JUMPTABLE EA.X68'
000007CA                           594   *ORG     $400
000007CA                           595  
000007CA                           596  
000007CA                           597  
000007CA                           598  
000007CA                           599  
000007CA                           600                 *MOVE.B       #%00, D5
000007CA                           601                
000007CA                           602                 *MOVE.B       #%111,D6         *MODE
000007CA                           603                 
000007CA                           604                 *MOVE.B       #%100,D7         *REGISTER
000007CA                           605                 
000007CA                           606                 *MOVE.L       #$4000, A5
000007CA                           607  
000007CA                           608                 *MOVE.B       #$0040, (A5)  
000007CA                           609  PRINT_EA 
000007CA                           610                 
000007CA  41F9 000007D8            611                 LEA     jmp_table_ea,A0      *Index into the table
000007D0                           612  
000007D0  CCFC 0006                613                 MULU        #6,D6            *Form offset     
000007D4                           614  
000007D4  4EF0 6000                615                 JMP         0(A0,D6)         *Jump indirect with index
000007D8                           616   
000007D8                           617  
000007D8  4EF9 00000808            618  jmp_table_ea   JMP         code000
000007DE                           619  
000007DE  4EF9 0000080C            620                 JMP         code001
000007E4                           621  
000007E4  4EF9 00000810            622                 JMP         code010
000007EA                           623  
000007EA  4EF9 00000814            624                 JMP         code011
000007F0                           625  
000007F0  4EF9 00000818            626                 JMP         code100
000007F6                           627  
000007F6  4EF9 0000081C            628                 JMP         code101
000007FC                           629  
000007FC  4EF9 00000820            630                 JMP         code110
00000802                           631  
00000802  4EF9 00000824            632                 JMP         code111
00000808                           633          
00000808                           634  
00000808                           635   
00000808                           636  
00000808                           637  
00000808                           638   
00000808                           639  
00000808                           640   
00000808                           641  
00000808  6000 001E                642  code000       BRA         DATA_REGISTER
0000080C                           643  
0000080C  6000 0036                644  code001       BRA         ADDRESS_REGISTER
00000810                           645  
00000810  6000 004E                646  code010       BRA         INDIRECT_ADDRESS
00000814                           647  
00000814  6000 0074                648  code011       BRA         ADDRESS_PI    * post increment
00000818                           649  
00000818  6000 009A                650  code100       BRA         ADDRESS_PD    * pre decrement
0000081C                           651  
0000081C  6000 00C0                652  code101       BRA         ADDRESS_W_DISPLACEMENT
00000820                           653  
00000820  6000 00C0                654  code110       BRA         ADDRESS_W_INDEX
00000824                           655  
00000824  6000 00C0                656  code111       BRA         GROUP_111
00000828                           657  
00000828                           658   
00000828                           659  DATA_REGISTER
00000828                           660  
00000828  43F9 00000AEE            661              LEA D_REGISTER, A1
0000082E                           662              
0000082E  4280                     663              CLR.L D0
00000830                           664              
00000830  103C 000E                665              MOVE.B #14, D0
00000834                           666              
00000834  4E4F                     667              TRAP #15                * print out 'D' for data register
00000836                           668              
00000836  4281                     669              CLR.L D1
00000838                           670              
00000838  1207                     671              MOVE.B D7, D1
0000083A                           672              
0000083A  103C 0003                673              MOVE.B #3, D0           * print out the number in the register
0000083E                           674              
0000083E  4E4F                     675              TRAP #15
00000840                           676              
00000840  6000 017A                677              BRA DONE
00000844                           678              
00000844                           679  
00000844                           680  ADDRESS_REGISTER
00000844  43F9 00000AF0            681              LEA A_REGISTER, A1
0000084A                           682              
0000084A  4280                     683              CLR.L D0
0000084C                           684              
0000084C  103C 000E                685              MOVE.B #14, D0          * print out the 'A' for address register
00000850                           686              
00000850  4E4F                     687              TRAP #15
00000852                           688              
00000852  4281                     689              CLR.L D1
00000854                           690              
00000854  1207                     691              MOVE.B D7, D1
00000856                           692              
00000856  103C 0003                693              MOVE.B #3, D0
0000085A                           694              
0000085A  4E4F                     695              TRAP #15                * print out the value in the data register
0000085C                           696  
0000085C  6000 015E                697              BRA DONE
00000860                           698              
00000860                           699  INDIRECT_ADDRESS
00000860  43F9 00000AF2            700              LEA IA_START, A1
00000866                           701              
00000866  4280                     702              CLR.L D0
00000868                           703              
00000868  103C 000E                704              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
0000086C                           705              
0000086C  4E4F                     706              TRAP #15
0000086E                           707              
0000086E  4281                     708              CLR.L D1
00000870                           709              
00000870  1207                     710              MOVE.B D7, D1
00000872                           711              
00000872  103C 0003                712              MOVE.B #3, D0
00000876                           713              
00000876  4E4F                     714              TRAP #15                * print out the value in the data register
00000878                           715              
00000878  43F9 00000AF5            716              LEA IA_END, A1
0000087E                           717  
0000087E  4280                     718              CLR.L D0
00000880                           719              
00000880  103C 000E                720              MOVE.B #14, D0          * print out the ')' for end of post increment address register
00000884                           721              
00000884  4E4F                     722              TRAP #15
00000886                           723              
00000886  6000 0134                724              BRA DONE
0000088A                           725  
0000088A                           726  ADDRESS_PI
0000088A  43F9 00000AF7            727              LEA A_PI_START, A1
00000890                           728              
00000890  4280                     729              CLR.L D0
00000892                           730              
00000892  103C 000E                731              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
00000896                           732              
00000896  4E4F                     733              TRAP #15
00000898                           734              
00000898  4281                     735              CLR.L D1
0000089A                           736              
0000089A  1207                     737              MOVE.B D7, D1
0000089C                           738              
0000089C  103C 0003                739              MOVE.B #3, D0
000008A0                           740              
000008A0  4E4F                     741              TRAP #15                * print out the value in the data register
000008A2                           742              
000008A2  43F9 00000AFA            743              LEA A_PI_END, A1
000008A8                           744  
000008A8  4280                     745              CLR.L D0
000008AA                           746              
000008AA  103C 000E                747              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
000008AE                           748     
000008AE  4E4F                     749              TRAP #15
000008B0                           750              
000008B0  6000 010A                751              BRA DONE  
000008B4                           752         
000008B4                           753  ADDRESS_PD
000008B4                           754  
000008B4  43F9 00000AFD            755              LEA A_PD_START, A1
000008BA                           756              
000008BA  4280                     757              CLR.L D0
000008BC                           758              
000008BC  103C 000E                759              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000008C0                           760              
000008C0  4E4F                     761              TRAP #15
000008C2                           762              
000008C2  4281                     763              CLR.L D1
000008C4                           764              
000008C4  1207                     765              MOVE.B D7, D1
000008C6                           766              
000008C6  103C 0003                767              MOVE.B #3, D0
000008CA                           768              
000008CA  4E4F                     769              TRAP #15                * print out the value in the data register
000008CC                           770              
000008CC  43F9 00000B01            771              LEA A_PD_END, A1
000008D2                           772  
000008D2  4280                     773              CLR.L D0
000008D4                           774              
000008D4  103C 000E                775              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
000008D8                           776  
000008D8  4E4F                     777              TRAP #15
000008DA                           778              
000008DA  6000 00E0                779              BRA DONE
000008DE                           780              
000008DE                           781  ADDRESS_W_DISPLACEMENT
000008DE  6000 00DC                782              BRA DONE
000008E2                           783  
000008E2                           784  ADDRESS_W_INDEX
000008E2  6000 00D8                785              BRA DONE
000008E6                           786  
000008E6                           787  GROUP_111
000008E6                           788  
000008E6  41F9 000008F4            789                 LEA         jmp_table_ea_111,A0    *Index into the table
000008EC                           790  
000008EC  CEFC 0006                791                 MULU        #6,D7       *Form offset     
000008F0                           792  
000008F0  4EF0 7000                793                 JMP         0(A0,D7)   *Jump indirect with index
000008F4                           794                 
000008F4                           795  jmp_table_ea_111   
000008F4  4EF9 0000091A            796                 JMP         reg000
000008FA                           797  
000008FA  4EF9 0000091E            798                 JMP         reg001
00000900                           799  
00000900  4EF9 00000912            800                 JMP         reg010
00000906                           801  
00000906  4EF9 00000916            802                 JMP         reg011
0000090C                           803  
0000090C  4EF9 00000922            804                 JMP         reg100
00000912                           805          
00000912                           806  
00000912  6000 0012                807  reg010       BRA         PC_W_DISPLACEMENT
00000916                           808  
00000916  6000 0012                809  reg011       BRA         PC_W_INDEX
0000091A                           810  
0000091A  6000 0012                811  reg000       BRA         ABSOLUTE_SHORT
0000091E                           812  
0000091E  6000 002C                813  reg001       BRA         ABSOLUTE_LONG
00000922                           814  
00000922  6000 0046                815  reg100       BRA         IMMEDIATE
00000926                           816  
00000926                           817  
00000926                           818  PC_W_DISPLACEMENT
00000926  6000 0094                819              BRA DONE
0000092A                           820  
0000092A                           821  PC_W_INDEX
0000092A  6000 0090                822              BRA DONE
0000092E                           823  
0000092E                           824  ABSOLUTE_SHORT
0000092E  43F9 00000AEA            825              LEA         HEX_SIGN, A1
00000934                           826              
00000934  103C 000E                827              MOVE.B      #14, D0
00000938                           828              
00000938  4E4F                     829              TRAP #15
0000093A                           830              
0000093A  4281                     831              CLR.L       D1
0000093C                           832              
0000093C  221D                     833              MOVE.L      (A5)+, D1
0000093E                           834              
0000093E  103C 000F                835              MOVE.B      #15, D0
00000942                           836              
00000942  143C 0010                837              MOVE.B      #16, D2
00000946                           838              
00000946  4E4F                     839              TRAP #15
00000948                           840              
00000948  6000 0072                841              BRA DONE  
0000094C                           842  
0000094C                           843  
0000094C                           844  ABSOLUTE_LONG
0000094C  43F9 00000AEA            845              LEA         HEX_SIGN, A1
00000952                           846              
00000952  103C 000E                847              MOVE.B      #14, D0
00000956                           848              
00000956  4E4F                     849              TRAP #15
00000958                           850              
00000958  4281                     851              CLR.L       D1
0000095A                           852              
0000095A  221D                     853              MOVE.L      (A5)+, D1
0000095C                           854              
0000095C  103C 000F                855              MOVE.B      #15, D0
00000960                           856              
00000960  143C 0010                857              MOVE.B      #16, D2
00000964                           858              
00000964  4E4F                     859              TRAP #15
00000966                           860                          
00000966  6000 0054                861              BRA DONE  
0000096A                           862  
0000096A                           863  
0000096A                           864  IMMEDIATE
0000096A  43F9 00000AE8            865              LEA     POUND_SIGN, A1
00000970                           866              
00000970  103C 000E                867              MOVE.B  #14, D0
00000974                           868              
00000974  4E4F                     869              TRAP #15
00000976                           870              
00000976  43F9 00000AEA            871              LEA     HEX_SIGN, A1
0000097C                           872              
0000097C  4E4F                     873              TRAP #15
0000097E                           874              
0000097E  BA3C 0000                875              CMP.B   #%00, D5
00000982                           876              
00000982  6700 000E                877              BEQ     IMMEDIATE_B
00000986                           878              
00000986  BA3C 0001                879              CMP.B   #%01, D5
0000098A                           880              
0000098A  6700 0014                881              BEQ     IMMEDIATE_W
0000098E                           882              
0000098E  6000 001E                883              BRA     IMMEDIATE_L
00000992                           884              
00000992                           885  IMMEDIATE_B
00000992  4285                     886              CLR.L       D5
00000994                           887     
00000994  1A1D                     888              MOVE.B      (A5)+, D5
00000996                           889              
00000996  4EB9 00000B06            890              JSR         HEX_TO_ASCII
0000099C                           891              
0000099C  6000 001E                892              BRA DONE
000009A0                           893  
000009A0                           894  IMMEDIATE_W
000009A0  4285                     895              CLR.L       D5
000009A2                           896  
000009A2  3A1D                     897              MOVE.W      (A5)+, D5
000009A4                           898              
000009A4  4EB9 00000B06            899              JSR         HEX_TO_ASCII
000009AA                           900              
000009AA                           901              *MOVE.B      #15, D0
000009AA                           902              
000009AA                           903              *MOVE.B      #16, D2
000009AA                           904              
000009AA                           905              *TRAP #15 
000009AA                           906              
000009AA  6000 0010                907              BRA DONE        
000009AE                           908  
000009AE                           909  IMMEDIATE_L 
000009AE  4285                     910              CLR.L       D5
000009B0                           911      
000009B0  4EB9 00000B06            912              JSR         HEX_TO_ASCII
000009B6                           913              
000009B6  4E4F                     914              TRAP #15
000009B8                           915              
000009B8  6000 0002                916              BRA DONE
000009BC                           917  
000009BC                           918  DONE
000009BC  4E75                     919      RTS
000009BE                           920      
000009BE                           921    INCLUDE 'MESSAGE_Data.X68'
000009BE                           922  
000009BE  =0000000D                923  CR  EQU $0D
000009BE  =0000000A                924  LF  EQU $0A 
000009BE                           925  
000009BE= 57 65 6C 63 6F 6D ...    926  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
000009EF= 45 6E 74 65 72 20 ...    927  STARTING        DC.B 'Enter the starting location: ', 0
00000A0D= 45 6E 74 65 72 20 ...    928  ENDING          DC.B 'Enter the ending locaiton: ', 0
00000A29                           929      
00000A29= 41 44 44 49 2E 00        930  ADDI_MESSAGE    DC.B 'ADDI.',0
00000A2F= 4D 4F 56 45 41 2E 00     931  MOVEA_MESSAGE   DC.B 'MOVEA.',0
00000A36= 4D 4F 56 45 2E 00        932  MOVE_MESSAGE    DC.B 'MOVE.',0
00000A3C= 4E 4F 50 00              933  NOP_MESSAGE     DC.B 'NOP',0
00000A40= 4D 4F 56 45 4D 2E 00     934  MOVEM_MESSAGE   DC.B 'MOVEM.',0
00000A47= 4A 53 52 00              935  JSR_MESSAGE     DC.B 'JSR',0
00000A4B= 52 54 53 00              936  RTS_MESSAGE     DC.B 'RTS',0
00000A4F= 43 4C 52 00              937  CLR_MESSAGE     DC.B 'CLR',0
00000A53= 41 44 44 51 2E 00        938  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00000A59= 42 45 51 00              939  BEQ_MESSAGE     DC.B 'BEQ',0   *//
00000A5D= 42 4E 45 00              940  BNE_MESSAGE     DC.B 'BNE',0   *//
00000A61= 42 43 53 00              941  BCS_MESSAGE     DC.B 'BCS',0   *//
00000A65= 42 47 45 00              942  BGE_MESSAGE     DC.B 'BGE',0   *//
00000A69= 42 47 54 00              943  BGT_MESSAGE     DC.B 'BGT',0   *//
00000A6D= 42 48 49 00              944  BHI_MESSAGE     DC.B 'BHI',0   *//
00000A71= 42 4C 45 00              945  BLE_MESSAGE     DC.B 'BLE',0   *//
00000A75= 42 4C 53 00              946  BLS_MESSAGE     DC.B 'BLS',0   *//
00000A79= 42 4C 54 00              947  BLT_MESSAGE     DC.B 'BLT',0   *//
00000A7D= 42 4D 49 00              948  BMI_MESSAGE     DC.B 'BMI',0   *//
00000A81= 42 50 4C 00              949  BPL_MESSAGE     DC.B 'BPL',0   *//
00000A85= 42 56 43 00              950  BVC_MESSAGE     DC.B 'BVC',0   *//
00000A89= 42 56 53 00              951  BVS_MESSAGE     DC.B 'BVS',0   *//
00000A8D                           952  
00000A8D= 4D 4F 56 45 51 2E 00     953  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00000A94= 44 49 56 55 2E 00        954  DIVU_MESSAGE    DC.B 'DIVU.',0
00000A9A= 4F 52 2E 00              955  OR_MESSAGE      DC.B 'OR.',0
00000A9E= 53 55 42 2E 00           956  SUB_MESSAGE     DC.B 'SUB.',0
00000AA3= 43 4D 50 2E 00           957  CMP_MESSAGE     DC.B 'CMP.',0
00000AA8= 4D 55 4C 53 2E 00        958  MULS_MESSAGE    DC.B 'MULS.',0
00000AAE= 41 4E 44 2E 00           959  AND_MESSAGE     DC.B 'AND.',0
00000AB3= 41 44 44 2E 00           960  ADD_MESSAGE     DC.B 'ADD.',0
00000AB8= 41 44 44 41 2E 00        961  ADDA_MESSAGE    DC.B 'ADDA.',0
00000ABE= 4C 53 4C 00              962  LSL_MESSAGE     DC.B 'LSL',0 *//
00000AC2= 41 53 4C 00              963  ASL_MESSAGE     DC.B 'ASL',0
00000AC6= 52 4F 4C 00              964  ROL_MESSAGE     DC.B 'ROL',0
00000ACA= 4C 53 52 00              965  LSR_MESSAGE     DC.B 'LSR',0 *//
00000ACE= 41 53 52 00              966  ASR_MESSAGE     DC.B 'ASR',0
00000AD2= 52 4F 52 00              967  ROR_MESSAGE     DC.B 'ROR',0
00000AD6= 42 20 20 20 20 00        968  SIZE_B_PRINT    DC.B 'B    ',0
00000ADC= 57 20 20 20 20 00        969  SIZE_W_PRINT    DC.B 'W    ',0
00000AE2= 4C 20 20 20 20 00        970  SIZE_L_PRINT    DC.B 'L    ',0
00000AE8= 23 00                    971  POUND_SIGN      DC.B '#',0
00000AEA= 24 00                    972  HEX_SIGN        DC.B '$',0
00000AEC= 2E 00                    973  PERIOD          DC.B '.',0
00000AEE                           974  
00000AEE= 44 00                    975  D_REGISTER      DC.B 'D',0
00000AF0= 41 00                    976  A_REGISTER      DC.B 'A',0
00000AF2= 28 41 00                 977  IA_START        DC.B '(A',0
00000AF5= 29 00                    978  IA_END          DC.B ')',0
00000AF7= 28 41 00                 979  A_PI_START      DC.B '(A',0
00000AFA= 29 2B 00                 980  A_PI_END        DC.B ')+',0
00000AFD= 2D 28 41 00              981  A_PD_START      DC.B '-(A',0
00000B01= 29 00                    982  A_PD_END        DC.B ')',0
00000B03= 2C 20 00                 983  COMMA           DC.B ', ',0
00000B06                           984  
00000B06                           985  
00000B06                           986  
00000B06                           987  
00000B06                           988  
00000B06                           989  
00000B06                           990  
00000B06                           991  
00000B06                           992  -------------------- end include --------------------
00000B06                           993    INCLUDE 'HEX_TO_ASCII_V1.X68'
00000B06                           994      *ORG    $5000
00000B06                           995  
00000B06                           996  
00000B06                           997  HEX_TO_ASCII      
00000B06  4283                     998       CLR.L      D3
00000B08                           999      
00000B08                          1000       *MOVE.L     #$ABCDEF, D5
00000B08                          1001       
00000B08                          1002  LOOP     
00000B08  2C05                    1003       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00000B0A                          1004       
00000B0A  4282                    1005       CLR.L      D2
00000B0C                          1006       
00000B0C  143C 001C               1007       MOVE.B     #28, D2
00000B10                          1008  
00000B10  E4AE                    1009       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00000B12                          1010       
00000B12  BC3C 000A               1011       CMP.B      #10, D6
00000B16                          1012       
00000B16  6C00 0006               1013       BGE        LETTER                  * determine if a letter or a number
00000B1A                          1014       
00000B1A  6000 000C               1015       BRA        NUMBER
00000B1E                          1016       
00000B1E                          1017  LETTER
00000B1E  0606 0037               1018       ADD.B      #55, D6
00000B22                          1019       
00000B22  1206                    1020       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00000B24                          1021       
00000B24  6000 000C               1022       BRA        PRINTOUT_NIBBLE
00000B28                          1023  
00000B28                          1024  NUMBER     
00000B28  0606 0030               1025       ADD.B      #48, D6
00000B2C                          1026       
00000B2C  1206                    1027       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00000B2E                          1028       
00000B2E  6000 0002               1029       BRA        PRINTOUT_NIBBLE
00000B32                          1030  
00000B32                          1031  
00000B32                          1032  PRINTOUT_NIBBLE
00000B32  E98D                    1033      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00000B34                          1034      
00000B34  BC3C 0030               1035      CMP.B      #$30, D6
00000B38                          1036  
00000B38  67CE                    1037      BEQ        LOOP             
00000B3A                          1038      
00000B3A  103C 0006               1039      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00000B3E                          1040      
00000B3E  4E4F                    1041      TRAP #15
00000B40                          1042      
00000B40  5203                    1043      ADD.B      #1, D3                   * add to the counter in D3
00000B42                          1044       
00000B42  B63C 0008               1045      CMP.B      #8, D3                   * compare to the counter to check if you are done
00000B46                          1046       
00000B46  6700 FE74               1047      BEQ        DONE
00000B4A                          1048          
00000B4A  60BC                    1049      BRA LOOP                            * continue the loop and print next nibble
00000B4C                          1050       
00000B4C                          1051            
00000B4C                          1052  
00000B4C                          1053  
00000B4C                          1054      *SIMHALT             ; halt simulator
00000B4C                          1055  
00000B4C                          1056  
00000B4C                          1057      *END    START       ; last line of source
00000B4C                          1058  
00000B4C                          1059  
00000B4C                          1060  
00000B4C                          1061  -------------------- end include --------------------
00000B4C                          1062       
00000B4C                          1063          
00000B4C                          1064      
00000B4C                          1065                 *END   $400 
00000B4C                          1066  
00000B4C                          1067   
00000B4C                          1068  
00000B4C                          1069  
00000B4C                          1070  
00000B4C                          1071  
00000B4C                          1072  
00000B4C                          1073  
00000B4C                          1074  
00000B4C                          1075  
00000B4C                          1076  -------------------- end include --------------------
00000B4C                          1077                 END   $400 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       94C
ABSOLUTE_SHORT      92E
ADDA_MESSAGE        AB8
ADDI_MESSAGE        A29
ADDQ_MESSAGE        A53
ADDRESS_PD          8B4
ADDRESS_PI          88A
ADDRESS_REGISTER    844
ADDRESS_W_DISPLACEMENT  8DE
ADDRESS_W_INDEX     8E2
ADDR_CODE           504
ADD_ADDA            4BE
ADD_CODE            504
ADD_MESSAGE         AB3
AND_MESSAGE         AAE
ASD                 614
ASD_MEMORY          67A
ASL                 62E
ASL_MESSAGE         AC2
ASR                 654
ASR_MESSAGE         ACE
A_PD_END            B01
A_PD_START          AFD
A_PI_END            AFA
A_PI_START          AF7
A_REGISTER          AF0
BCS_MESSAGE         A61
BEQ_MESSAGE         A59
BGE_MESSAGE         A65
BGT_MESSAGE         A69
BHI_MESSAGE         A6D
BLE_MESSAGE         A71
BLS_MESSAGE         A75
BLT_MESSAGE         A79
BMI_MESSAGE         A7D
BNE_MESSAGE         A5D
BPL_MESSAGE         A81
BVC_MESSAGE         A85
BVS_MESSAGE         A89
CLR_MESSAGE         A4F
CMP_MESSAGE         AA3
CODE000             808
CODE0000            480
CODE0001            484
CODE001             80C
CODE0010            488
CODE0011            48C
CODE010             810
CODE0100            490
CODE0101            494
CODE011             814
CODE0110            498
CODE0111            49C
CODE100             818
CODE1000            4A0
CODE1001            4A4
CODE101             81C
CODE1010            4A8
CODE1011            4AC
CODE110             820
CODE1100            4AE
CODE1101            4B2
CODE111             824
CODE1110            4B6
CODE1111            4BA
COMMA               B03
CR                  D
DATA_REGISTER       828
DIVU_MESSAGE        A94
DONE                9BC
D_REGISTER          AEE
ENDING              A0D
EXAMPLE             EF28
GROUP_111           8E6
HEX_SIGN            AEA
HEX_TO_ASCII        B06
IA_END              AF5
IA_START            AF2
IMMEDIATE           96A
IMMEDIATE_B         992
IMMEDIATE_L         9AE
IMMEDIATE_W         9A0
INDIRECT_ADDRESS    860
JMP_TABLE           420
JMP_TABLE_EA        7D8
JMP_TABLE_EA_111    8F4
JSR_MESSAGE         A47
LETTER              B1E
LF                  A
LOOP                B08
LSD                 504
LSD_MEMORY          582
LSL                 536
LSL_MESSAGE         ABE
LSR                 55C
LSR_MESSAGE         ACA
MOVEAL              7B0
MOVEAW              796
MOVEA_MESSAGE       A2F
MOVEB               718
MOVEL               764
MOVEM_MESSAGE       A40
MOVEQ_MESSAGE       A8D
MOVEW               732
MOVE_MESSAGE        A36
MULS_MESSAGE        AA8
NOP_MESSAGE         A3C
NUMBER              B28
OR_MESSAGE          A9A
PC_W_DISPLACEMENT   926
PC_W_INDEX          92A
PERIOD              AEC
POUND_SIGN          AE8
PRINTOUT_COUNT      6A2
PRINTOUT_MEMORY_SHIFTS_EA  6EC
PRINTOUT_NIBBLE     B32
PRINTOUT_REGISTER   6C8
PRINTOUT_REGISTER_SHIFTS_EA  684
PRINT_EA            7CA
REG000              91A
REG001              91E
REG010              912
REG011              916
REG100              922
ROD                 58C
ROD_MEMORY          60A
ROL                 5BE
ROL_MESSAGE         AC6
ROR                 5E4
ROR_MESSAGE         AD2
RTS_MESSAGE         A4B
SHIFT               C
SHIFTS              4E0
SIZE_B_PRINT        AD6
SIZE_L_PRINT        AE2
SIZE_W_PRINT        ADC
STACK               A000
START               400
STARTING            9EF
SUB_MESSAGE         A9E
WELCOME_MESSAGE     9BE
