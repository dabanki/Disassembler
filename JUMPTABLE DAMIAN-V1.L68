00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/23/2016 1:04:07 AM

00000000  =0000A000                  1  stack            EQU      $A000
00000000                             2  
00000000  =0000E64A                  3  example          EQU      %1110011001001010    * I made up bits 0 to 11      
00000000                             4  
00000000  =0000000C                  5  shift            EQU     12                    * Shift 12 bits 
00000000                             6  
00000000                             7   
00000000                             8  
00000000                             9  * Program starts here
00000000                            10  
00000000                            11   
00000000                            12  
00000400                            13                   ORG     $400
00000400                            14  
00000400  4FF9 0000A000             15  start            LEA     stack,SP        *Load the SP
00000406                            16  
00000406  41F9 00000420             17                   LEA     jmp_table,A0    *Index into the table
0000040C                            18  
0000040C  4280                      19                   CLR.L   D0              *Zero it
0000040E                            20  
0000040E  303C E64A                 21                   MOVE.W  #example,D0     *We'll play with it here
00000412                            22  
00000412  123C 000C                 23                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
00000416                            24  
00000416  E268                      25                   LSR.W   D1,D0           *Move the bits
00000418                            26  
00000418                            27  *
00000418                            28  
00000418                            29  * Consider the next instruction. Why do we have to multiply the index 
00000418                            30  
00000418                            31  * by 6? How many bytes does a single jump table entry require? 
00000418                            32  
00000418                            33   
00000418                            34  
00000418  C0FC 0006                 35                 MULU        #6,D0       *Form offset     
0000041C                            36  
0000041C  4EB0 0000                 37                 JSR         0(A0,D0)   *Jump indirect with index
00000420                            38  
00000420                            39                      
00000420                            40  
00000420  4EF9 00000480             41  jmp_table      JMP         code0000
00000426                            42  
00000426  4EF9 00000484             43                 JMP         code0001
0000042C                            44  
0000042C  4EF9 00000488             45                 JMP         code0010
00000432                            46  
00000432  4EF9 0000048C             47                 JMP         code0011
00000438                            48  
00000438  4EF9 00000490             49                 JMP         code0100
0000043E                            50  
0000043E  4EF9 00000494             51                 JMP         code0101
00000444                            52  
00000444  4EF9 00000498             53                 JMP         code0110
0000044A                            54  
0000044A  4EF9 0000049C             55                 JMP         code0111
00000450                            56  
00000450  4EF9 000004A0             57                 JMP         code1000
00000456                            58  
00000456  4EF9 000004A4             59                 JMP         code1001
0000045C                            60  
0000045C  4EF9 000004A8             61                 JMP         code1010
00000462                            62  
00000462  4EF9 000004AC             63                 JMP         code1011
00000468                            64  
00000468  4EF9 000004AE             65                 JMP         code1100
0000046E                            66  
0000046E  4EF9 000004B2             67                 JMP         code1101
00000474                            68  
00000474  4EF9 000004B6             69                 JMP         code1110
0000047A                            70  
0000047A  4EF9 000004BA             71                 JMP         code1111
00000480                            72  
00000480                            73          
00000480                            74  
00000480                            75   
00000480                            76  
00000480                            77  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
00000480                            78  
00000480                            79   
00000480                            80  
00000480                            81   
00000480                            82  
00000480  4E72 2700                 83  code0000       STOP        #$2700
00000484                            84  
00000484  6000 02F0                 85  code0001       BRA         MOVEB
00000488                            86  
00000488  6000 0306                 87  code0010       BRA         MOVEW
0000048C                            88  
0000048C  6000 0334                 89  code0011       BRA         MOVEL
00000490                            90  
00000490  4E72 2700                 91  code0100       STOP        #$2700
00000494                            92  
00000494  4E72 2700                 93  code0101       STOP        #$2700
00000498                            94  
00000498  4E72 2700                 95  code0110       STOP        #$2700
0000049C                            96  
0000049C  4E72 2700                 97  code0111       STOP        #$2700
000004A0                            98  
000004A0  4E72 2700                 99  code1000       STOP        #$2700
000004A4                           100  
000004A4  4E72 2700                101  code1001       STOP        #$2700
000004A8                           102  
000004A8  4E72 2700                103  code1010       STOP        #$2700
000004AC                           104  
000004AC                           105   
000004AC                           106  
000004AC                           107  * Next we put in the next level of decoding. I just stuck this BRA
000004AC                           108  
000004AC                           109  * instruction here so it would look different. If this was your real
000004AC                           110  
000004AC                           111  * code, you would decode to the next level. Perhaps this would be
000004AC                           112  
000004AC                           113   * another jump table to the 8 possible op-codes at the next level.
000004AC                           114  
000004AC                           115   
000004AC                           116  
000004AC  60FE                     117  code1011       BRA        code1011
000004AE                           118  
000004AE  4E72 2700                119  code1100       STOP        #$2700
000004B2                           120  
000004B2  6000 000A                121  code1101       BRA         ADD_ADDA       *#$2700
000004B6                           122  
000004B6  6000 0028                123  code1110       BRA         SHIFTS
000004BA                           124  
000004BA  4E72 2700                125  code1111       STOP        #$2700
000004BE                           126  
000004BE                           127  
000004BE                           128  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
000004BE                           129                
000004BE  4280                     130                   CLR.L D0                *clear D0
000004C0                           131                   
000004C0  4281                     132                   CLR.L D1                *clear D1
000004C2                           133                   
000004C2  303C E64A                134                   MOVE.W  #example,D0     *D0 is the binary value to decode
000004C6                           135  
000004C6  123C 0008                136                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000004CA                           137  
000004CA  E368                     138                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000004CC                           139                   
000004CC  123C 000E                140                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
000004D0                           141  
000004D0  E268                     142                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000004D2                           143                                              
000004D2  B03C 0003                144                   CMP.B    #$3, D0        *if D0 holds 3, the opcode is ADDA
000004D6                           145                   
000004D6  6700 002C                146                   BEQ      ADDR_CODE
000004DA                           147                   
000004DA  4EF9 00000504            148                   JMP      ADD_CODE
000004E0                           149                   
000004E0  4280                     150  SHIFTS           CLR.L D0
000004E2                           151  
000004E2  4281                     152                   CLR.L D1
000004E4                           153                   
000004E4  303C E64A                154                   MOVE.W #example,D0
000004E8                           155                   
000004E8  E948                     156                   LSL.W #4,D0            *shift out the opcode
000004EA                           157                   
000004EA  123C 000D                158                   MOVE.B #13,D1          
000004EE                           159                   
000004EE  E268                     160                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
000004F0                           161                   
000004F0  B03C 0001                162                   CMP.B #1,D0            
000004F4                           163                   
000004F4  6700 000E                164                   BEQ LSD                *if the bits are 1, it is a logical shift
000004F8                           165                   
000004F8  B03C 0003                166                   CMP.B #3,D0
000004FC                           167                   
000004FC  6700 008E                168                   BEQ ROD                *if the bits are 3, it is a rotation
00000500                           169                   
00000500  6000 0112                170                   BRA ASD                *if it is not equal to 1 or 3, it is arithmetic shift
00000504                           171                   
00000504                           172  ADDR_CODE  
00000504                           173       *need to error check 
00000504                           174  
00000504                           175  ADD_CODE 
00000504                           176      *JMP ADD_ADDA
00000504                           177      *need to error check 
00000504                           178  
00000504  4280                     179  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00000506                           180                   
00000506  4281                     181                   CLR.L D1
00000508                           182                   
00000508  303C E64A                183                   MOVE.W #example,D0
0000050C                           184                   
0000050C  E148                     185                   LSL.W #8,D0
0000050E                           186                   
0000050E  123C 000E                187                   MOVE.B #14,D1
00000512                           188                   
00000512  E268                     189                   LSR.W D1,D0
00000514                           190                   
00000514  B03C 0003                191                   CMP.B #3,D0            *need to check the two bits after the direction 
00000518                           192                   
00000518  6600 00FA                193                   BNE ASD                *if the two bits are not 3, it is an arithmetic shift
0000051C                           194                   
0000051C  203C 0000E64A            195                   MOVE.L #example, D0
00000522                           196                   
00000522  EF48                     197                   LSL.W  #7, D0
00000524                           198                   
00000524  123C 000F                199                   MOVE.B #15, D1
00000528                           200                   
00000528  E268                     201                   LSR.W  D1, D0
0000052A                           202                   
0000052A  B03C 0001                203                   CMP.B  #1, D0
0000052E                           204                   
0000052E  6700 0006                205                   BEQ LSL
00000532                           206                   
00000532  6000 0028                207                   BRA LSR
00000536                           208                   
00000536                           209  
00000536                           210  LSL
00000536  43F9 00000B1C            211                   LEA LSL_MESSAGE, A1    * print message
0000053C                           212                   
0000053C  103C 000E                213                   MOVE.B #14, D0
00000540                           214                   
00000540  4E4F                     215                   TRAP #15
00000542                           216              
00000542  203C 0000E64A            217                   MOVE.L #example, D0
00000548                           218                   
00000548  E148                     219                   LSL.W #8, D0
0000054A                           220                   
0000054A  123C 000E                221                   MOVE.B #14, D1
0000054E                           222                   
0000054E  E268                     223                   LSR.W D1, D0
00000550                           224                   
00000550  B03C 0003                225                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00000554                           226                   
00000554  6700 002C                227                   BEQ LSD_MEMORY
00000558                           228                   
00000558  6000 012A                229                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000055C                           230  
0000055C                           231  LSR              
0000055C  43F9 00000B28            232                   LEA LSR_MESSAGE, A1            * print message
00000562                           233                   
00000562  103C 000E                234                   MOVE.B #14, D0
00000566                           235                   
00000566  4E4F                     236                   TRAP #15
00000568                           237          
00000568  203C 0000E64A            238                   MOVE.L #example, D0
0000056E                           239                   
0000056E  E148                     240                   LSL.W #8, D0
00000570                           241                   
00000570  123C 000E                242                   MOVE.B #14, D1
00000574                           243                   
00000574  E268                     244                   LSR.W D1, D0
00000576                           245                   
00000576  B03C 0003                246                   CMP.B  #%11, D0            * check to see if memory shift
0000057A                           247                   
0000057A  6700 0006                248                   BEQ LSD_MEMORY
0000057E                           249                   
0000057E  6000 0104                250                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00000582                           251                   
00000582                           252  LSD_MEMORY
00000582  4EB9 0000073E            253                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000588                           254                   
00000588  6000 0490                255                   BRA DONE
0000058C                           256              
0000058C                           257  
0000058C  4280                     258  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
0000058E                           259                   
0000058E  4281                     260                   CLR.L D1
00000590                           261                   
00000590  303C E64A                262                   MOVE.W #example,D0
00000594                           263                   
00000594  E148                     264                   LSL.W #8,D0
00000596                           265                   
00000596  123C 000E                266                   MOVE.B #14,D1
0000059A                           267                   
0000059A  E268                     268                   LSR.W D1,D0
0000059C                           269                   
0000059C  B03C 0003                270                   CMP.B #3,D0
000005A0                           271                   
000005A0  6600 0072                272                   BNE ASD
000005A4                           273                   
000005A4  203C 0000E64A            274                   MOVE.L #example, D0
000005AA                           275                   
000005AA  EF48                     276                   LSL.W  #7, D0
000005AC                           277                   
000005AC  123C 000F                278                   MOVE.B #15, D1
000005B0                           279                   
000005B0  E268                     280                   LSR.W  D1, D0
000005B2                           281                   
000005B2  B03C 0001                282                   CMP.B  #1, D0
000005B6                           283                   
000005B6  6700 0006                284                   BEQ ROL
000005BA                           285                   
000005BA  6000 0028                286                   BRA ROR
000005BE                           287  
000005BE                           288  ROL              
000005BE  43F9 00000B24            289                   LEA ROL_MESSAGE, A1
000005C4                           290                   
000005C4  103C 000E                291                   MOVE.B #14, D0
000005C8                           292                   
000005C8  4E4F                     293                   TRAP #15
000005CA                           294  
000005CA  203C 0000E64A            295                   MOVE.L #example, D0
000005D0                           296                   
000005D0  E148                     297                   LSL.W #8, D0
000005D2                           298                   
000005D2  123C 000E                299                   MOVE.B #14, D1
000005D6                           300                   
000005D6  E268                     301                   LSR.W D1, D0
000005D8                           302                   
000005D8  B03C 0003                303                   CMP.B  #%11, D0            * check to see if its memory shift
000005DC                           304                   
000005DC  6700 002C                305                   BEQ ROD_MEMORY
000005E0                           306                   
000005E0  6000 00A2                307                   BRA PRINTOUT_REGISTER_SHIFTS_EA
000005E4                           308  
000005E4                           309  ROR       
000005E4  43F9 00000B30            310                   LEA ROR_MESSAGE, A1
000005EA                           311                   
000005EA  103C 000E                312                   MOVE.B #14, D0
000005EE                           313                   
000005EE  4E4F                     314                   TRAP #15
000005F0                           315                   
000005F0  203C 0000E64A            316                   MOVE.L #example, D0
000005F6                           317                   
000005F6  E148                     318                   LSL.W #8, D0
000005F8                           319                   
000005F8  123C 000E                320                   MOVE.B #14, D1
000005FC                           321                   
000005FC  E268                     322                   LSR.W D1, D0
000005FE                           323                   
000005FE  B03C 0003                324                   CMP.B  #%11, D0            * check to see if its memory shift
00000602                           325                   
00000602  6700 0006                326                   BEQ ROD_MEMORY
00000606                           327                   
00000606  6000 007C                328                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000060A                           329  
0000060A                           330  ROD_MEMORY       
0000060A  4EB9 0000073E            331                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000610                           332                   
00000610  6000 0408                333                   BRA DONE
00000614                           334                   
00000614                           335                   
00000614  203C 0000E64A            336  ASD              MOVE.L #example, D0
0000061A                           337                   
0000061A  EF48                     338                   LSL.W  #7, D0
0000061C                           339                   
0000061C  123C 000F                340                   MOVE.B #15, D1
00000620                           341                   
00000620  E268                     342                   LSR.W  D1, D0
00000622                           343                   
00000622  B03C 0001                344                   CMP.B  #1, D0
00000626                           345                   
00000626  6700 0006                346                   BEQ ASL
0000062A                           347                   
0000062A  6000 0028                348                   BRA ASR
0000062E                           349                   
0000062E                           350  ASL
0000062E  43F9 00000B20            351                   LEA ASL_MESSAGE, A1
00000634                           352                   
00000634  103C 000E                353                   MOVE.B #14, D0
00000638                           354                   
00000638  4E4F                     355                   TRAP #15
0000063A                           356                   
0000063A  203C 0000E64A            357                   MOVE.L #example, D0
00000640                           358                   
00000640  E148                     359                   LSL.W #8, D0
00000642                           360                   
00000642  123C 000E                361                   MOVE.B #14, D1
00000646                           362                   
00000646  E268                     363                   LSR.W D1, D0
00000648                           364                   
00000648  B03C 0003                365                   CMP.B  #%11, D0            * check to see if its memory shift
0000064C                           366                   
0000064C  6700 002C                367                   BEQ ASD_MEMORY
00000650                           368                   
00000650  6000 0032                369                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00000654                           370                                    
00000654                           371  
00000654                           372  ASR              
00000654  43F9 00000B2C            373                   LEA ASR_MESSAGE, A1
0000065A                           374                   
0000065A  103C 000E                375                   MOVE.B #14, D0
0000065E                           376                   
0000065E  4E4F                     377                   TRAP #15
00000660                           378                   
00000660  203C 0000E64A            379                   MOVE.L #example, D0
00000666                           380                   
00000666  E148                     381                   LSL.W #8, D0
00000668                           382                   
00000668  123C 000E                383                   MOVE.B #14, D1
0000066C                           384                   
0000066C  E268                     385                   LSR.W D1, D0
0000066E                           386                   
0000066E  B03C 0003                387                   CMP.B  #%11, D0            * check to see if its memory shift
00000672                           388                   
00000672  6700 0006                389                   BEQ ASD_MEMORY
00000676                           390                   
00000676  6000 000C                391                   BRA PRINTOUT_REGISTER_SHIFTS_EA
0000067A                           392  
0000067A                           393  ASD_MEMORY
0000067A  4EB9 0000073E            394                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00000680                           395                   
00000680  6000 0398                396                   BRA DONE
00000684                           397                   
00000684                           398  PRINTOUT_REGISTER_SHIFTS_EA
00000684  43F9 00000B4A            399                   LEA PERIOD, A1
0000068A                           400                   
0000068A  103C 000E                401                   MOVE.B #14, D0
0000068E                           402                   
0000068E  4E4F                     403                   TRAP #15
00000690                           404  
00000690  203C 0000E64A            405                   MOVE.L #example, D0
00000696                           406                   
00000696  123C 000A                407                   MOVE.B #10, D1
0000069A                           408                   
0000069A  E368                     409                   LSL.W D1, D0
0000069C                           410                   
0000069C  123C 000F                411                   MOVE.B #15, D1
000006A0                           412                   
000006A0  E268                     413                   LSR.W D1, D0
000006A2                           414                   
000006A2  B03C 0001                415                   CMP.B #1, D0
000006A6                           416                   
000006A6  6700 0052                417                   BEQ PRINTOUT_REGISTER
000006AA                           418                   
000006AA  6000 0002                419                   BRA PRINTOUT_COUNT
000006AE                           420  
000006AE                           421                   
000006AE                           422  PRINTOUT_COUNT
000006AE  43F9 00000B46            423                   LEA POUND_SIGN, A1
000006B4                           424  
000006B4  103C 000E                425                   MOVE.B #14, D0
000006B8                           426  
000006B8  4E4F                     427                   TRAP #15     
000006BA                           428                 
000006BA  203C 0000E64A            429                   MOVE.L #example, D0
000006C0                           430                   
000006C0  E948                     431                   LSL.W #4, D0
000006C2                           432                   
000006C2  123C 000D                433                   MOVE.B #13, D1
000006C6                           434                   
000006C6  E268                     435                   LSR.W D1, D0
000006C8                           436                   
000006C8  1200                     437                   MOVE.B D0, D1
000006CA                           438                   
000006CA  103C 0003                439                   MOVE.B #3, D0
000006CE                           440                   
000006CE  4E4F                     441                   TRAP #15                  * print out the amount that the ea is being shifted by
000006D0                           442                   
000006D0  43F9 00000B4C            443                   LEA SPACE, A1
000006D6                           444                   
000006D6  103C 000E                445                   MOVE.B #14, D0
000006DA                           446                   
000006DA  4E4F                     447                   TRAP #15
000006DC                           448                   
000006DC  203C 0000E64A            449                   MOVE.L #example, D0
000006E2                           450                   
000006E2  123C 000D                451                   MOVE.B #13, D1                * to print out the ea that is being shifted
000006E6                           452                   
000006E6  E368                     453                   LSL.W D1, D0
000006E8                           454                   
000006E8  E268                     455                   LSR.W D1, D0
000006EA                           456                   
000006EA  1E00                     457                   MOVE.B D0, D7
000006EC                           458                   
000006EC  1C3C 0000                459                   MOVE.B #%000, D6              * we know it is a data register
000006F0                           460                   
000006F0  4EB9 00000828            461                   JSR PRINT_EA
000006F6                           462                   
000006F6  6000 0322                463                   BRA DONE
000006FA                           464                   
000006FA                           465  
000006FA                           466  PRINTOUT_REGISTER
000006FA  203C 0000E64A            467                   MOVE.L #example, D0
00000700                           468                   
00000700  E948                     469                   LSL.W #4, D0
00000702                           470                   
00000702  123C 000D                471                   MOVE.B #13, D1
00000706                           472                   
00000706  E268                     473                   LSR.W D1, D0
00000708                           474                   
00000708  1E00                     475                   MOVE.B D0, D7
0000070A                           476                   
0000070A  1C3C 0000                477                   MOVE.B #%000, D6
0000070E                           478                   
0000070E  4EB9 00000828            479                   JSR PRINT_EA                  * to print out the data register
00000714                           480                   
00000714  43F9 00000B4C            481                   LEA SPACE, A1
0000071A                           482                   
0000071A  103C 000E                483                   MOVE.B #14, D0
0000071E                           484                   
0000071E  4E4F                     485                   TRAP #15
00000720                           486                   
00000720  203C 0000E64A            487                   MOVE.L #example, D0
00000726                           488                   
00000726  123C 000D                489                   MOVE.B #13, D1                * to print out the ea that is being shifted
0000072A                           490                   
0000072A  E368                     491                   LSL.W D1, D0
0000072C                           492                   
0000072C  E268                     493                   LSR.W D1, D0
0000072E                           494                   
0000072E  1E00                     495                   MOVE.B D0, D7
00000730                           496                   
00000730  1C3C 0000                497                   MOVE.B #%000, D6              * we know it is a data register
00000734                           498                   
00000734  4EB9 00000828            499                   JSR PRINT_EA
0000073A                           500                   
0000073A  6000 02DE                501                   BRA DONE
0000073E                           502                                   
0000073E                           503  
0000073E                           504  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
0000073E  43F9 00000B4A            505                   LEA PERIOD, A1
00000744                           506                   
00000744  103C 000E                507                   MOVE.B #14, D0
00000748                           508                   
00000748  4E4F                     509                   TRAP #15
0000074A                           510  
0000074A  203C 0000E64A            511                   MOVE.L #example, D0
00000750                           512                   
00000750  123C 000A                513                   MOVE.B #10, D1
00000754                           514                   
00000754  E368                     515                   LSL.W D1, D0
00000756                           516                   
00000756  123C 000D                517                   MOVE.B #13, D1
0000075A                           518                   
0000075A  E268                     519                   LSR.W D1, D0
0000075C                           520                   
0000075C  1C00                     521                   MOVE.B D0, D6
0000075E                           522                   
0000075E  203C 0000E64A            523                   MOVE.L #example, D0
00000764                           524                   
00000764  123C 000D                525                   MOVE.B #13, D1
00000768                           526                   
00000768  E368                     527                   LSL.W D1, D0
0000076A                           528                   
0000076A  E268                     529                   LSR.W D1, D0
0000076C                           530                   
0000076C  1E00                     531                   MOVE.B D0, D7
0000076E                           532                   
0000076E  4EB9 00000828            533                   JSR PRINT_EA
00000774                           534                   
00000774  4E75                     535                   RTS
00000776                           536                  
00000776                           537                
00000776  43F9 00000A94            538  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
0000077C                           539  
0000077C  4280                     540                   CLR.L  D0
0000077E                           541                   
0000077E  103C 000E                542                   MOVE.B #14, D0
00000782                           543                   
00000782  4E4F                     544                   TRAP #15
00000784                           545                   
00000784  43F9 00000B34            546                   LEA SIZE_B_PRINT, A1
0000078A                           547                   
0000078A  4E4F                     548                   TRAP #15               * done printing opcode and size
0000078C                           549                   
0000078C  6000 028C                550                   BRA DONE
00000790                           551  
00000790  4280                     552  MOVEW            CLR.L D0
00000792                           553                   
00000792  4281                     554                   CLR.L D1
00000794                           555                   
00000794  303C E64A                556                   MOVE.W #example,D0
00000798                           557                   
00000798  EF48                     558                   LSL.W #7,D0
0000079A                           559                   
0000079A  123C 000D                560                   MOVE.B #13,D1
0000079E                           561                   
0000079E  E268                     562                   LSR.W D1,D0
000007A0                           563                   
000007A0  B03C 0001                564                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
000007A4                           565                   
000007A4  6700 004E                566                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
000007A8                           567                   
000007A8  43F9 00000A94            568                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
000007AE                           569                   
000007AE  4280                     570                   CLR.L D0
000007B0                           571                   
000007B0  103C 000E                572                   MOVE.B #14, D0
000007B4                           573                   
000007B4  4E4F                     574                   TRAP #15
000007B6                           575                   
000007B6  43F9 00000B3A            576                   LEA SIZE_W_PRINT, A1
000007BC                           577                   
000007BC  4E4F                     578                   TRAP #15               * done printing opcode and size
000007BE                           579                      
000007BE  6000 025A                580                   BRA DONE
000007C2                           581                
000007C2                           582  
000007C2  4280                     583  MOVEL            CLR.L D0
000007C4                           584                   
000007C4  4281                     585                   CLR.L D1
000007C6                           586                   
000007C6  303C E64A                587                   MOVE.W #example,D0
000007CA                           588                   
000007CA  EF48                     589                   LSL.W #7,D0
000007CC                           590                   
000007CC  123C 000D                591                   MOVE.B #13,D1
000007D0                           592                   
000007D0  E268                     593                   LSR.W D1,D0
000007D2                           594                   
000007D2  B03C 0001                595                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
000007D6                           596                   
000007D6  6700 0036                597                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
000007DA                           598                   
000007DA  43F9 00000A94            599                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
000007E0                           600                   
000007E0  4280                     601                   CLR.L D0
000007E2                           602                   
000007E2  103C 000E                603                   MOVE.B #14, D0
000007E6                           604                   
000007E6  4E4F                     605                   TRAP #15
000007E8                           606                   
000007E8  43F9 00000B40            607                   LEA SIZE_L_PRINT, A1
000007EE                           608                   
000007EE  4E4F                     609                   TRAP #15               * done printing opcode and size
000007F0                           610                   
000007F0  6000 0228                611                   BRA DONE
000007F4                           612                   
000007F4                           613                   
000007F4  43F9 00000A8D            614  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
000007FA                           615  
000007FA  4280                     616                   CLR.L D0
000007FC                           617                   
000007FC  103C 000E                618                   MOVE.B #14, D0
00000800                           619                   
00000800  4E4F                     620                   TRAP #15
00000802                           621                   
00000802  43F9 00000B3A            622                   LEA SIZE_W_PRINT, A1
00000808                           623                   
00000808  4E4F                     624                   TRAP #15               * done printing out opcode and size
0000080A                           625                   
0000080A  6000 020E                626                   BRA DONE
0000080E                           627  
0000080E  43F9 00000A8D            628  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00000814                           629  
00000814  4280                     630                   CLR.L D0
00000816                           631                   
00000816  103C 000E                632                   MOVE.B #14, D0
0000081A                           633                   
0000081A  4E4F                     634                   TRAP #15
0000081C                           635                   
0000081C  43F9 00000B40            636                   LEA SIZE_L_PRINT, A1
00000822                           637                   
00000822  4E4F                     638                   TRAP #15               * done printing out opcode and size
00000824                           639                   
00000824  6000 01F4                640                   BRA DONE               
00000828                           641              
00000828                           642  
00000828                           643              *INCLUDE 'MESSAGE_Data.X68'
00000828                           644              INCLUDE 'JUMPTABLE EA.X68'
00000828                           645   *ORG     $400
00000828                           646  
00000828                           647  
00000828                           648  
00000828                           649  
00000828                           650  
00000828                           651                 *MOVE.B       #%00, D5
00000828                           652                
00000828                           653                 *MOVE.B       #%111,D6         *MODE
00000828                           654                 
00000828                           655                 *MOVE.B       #%100,D7         *REGISTER
00000828                           656                 
00000828                           657                 *MOVE.L       #$4000, A5
00000828                           658  
00000828                           659                 *MOVE.B       #$0040, (A5)  
00000828                           660  PRINT_EA 
00000828                           661                 
00000828  41F9 00000836            662                 LEA     jmp_table_ea,A0      *Index into the table
0000082E                           663  
0000082E  CCFC 0006                664                 MULU        #6,D6            *Form offset     
00000832                           665  
00000832  4EF0 6000                666                 JMP         0(A0,D6)         *Jump indirect with index
00000836                           667   
00000836                           668  
00000836  4EF9 00000866            669  jmp_table_ea   JMP         code000
0000083C                           670  
0000083C  4EF9 0000086A            671                 JMP         code001
00000842                           672  
00000842  4EF9 0000086E            673                 JMP         code010
00000848                           674  
00000848  4EF9 00000872            675                 JMP         code011
0000084E                           676  
0000084E  4EF9 00000876            677                 JMP         code100
00000854                           678  
00000854  4EF9 0000087A            679                 JMP         code101
0000085A                           680  
0000085A  4EF9 0000087E            681                 JMP         code110
00000860                           682  
00000860  4EF9 00000882            683                 JMP         code111
00000866                           684          
00000866                           685  
00000866                           686   
00000866                           687  
00000866                           688  
00000866                           689   
00000866                           690  
00000866                           691   
00000866                           692  
00000866  6000 001E                693  code000       BRA         DATA_REGISTER
0000086A                           694  
0000086A  6000 0036                695  code001       BRA         ADDRESS_REGISTER
0000086E                           696  
0000086E  6000 004E                697  code010       BRA         INDIRECT_ADDRESS
00000872                           698  
00000872  6000 0074                699  code011       BRA         ADDRESS_PI    * post increment
00000876                           700  
00000876  6000 009A                701  code100       BRA         ADDRESS_PD    * pre decrement
0000087A                           702  
0000087A  6000 00C0                703  code101       BRA         ADDRESS_W_DISPLACEMENT
0000087E                           704  
0000087E  6000 00C0                705  code110       BRA         ADDRESS_W_INDEX
00000882                           706  
00000882  6000 00C0                707  code111       BRA         GROUP_111
00000886                           708  
00000886                           709   
00000886                           710  DATA_REGISTER
00000886                           711  
00000886  43F9 00000B4F            712              LEA D_REGISTER, A1
0000088C                           713              
0000088C  4280                     714              CLR.L D0
0000088E                           715              
0000088E  103C 000E                716              MOVE.B #14, D0
00000892                           717              
00000892  4E4F                     718              TRAP #15                * print out 'D' for data register
00000894                           719              
00000894  4281                     720              CLR.L D1
00000896                           721              
00000896  1207                     722              MOVE.B D7, D1
00000898                           723              
00000898  103C 0003                724              MOVE.B #3, D0           * print out the number in the register
0000089C                           725              
0000089C  4E4F                     726              TRAP #15
0000089E                           727              
0000089E  6000 017A                728              BRA DONE
000008A2                           729              
000008A2                           730  
000008A2                           731  ADDRESS_REGISTER
000008A2  43F9 00000B51            732              LEA A_REGISTER, A1
000008A8                           733              
000008A8  4280                     734              CLR.L D0
000008AA                           735              
000008AA  103C 000E                736              MOVE.B #14, D0          * print out the 'A' for address register
000008AE                           737              
000008AE  4E4F                     738              TRAP #15
000008B0                           739              
000008B0  4281                     740              CLR.L D1
000008B2                           741              
000008B2  1207                     742              MOVE.B D7, D1
000008B4                           743              
000008B4  103C 0003                744              MOVE.B #3, D0
000008B8                           745              
000008B8  4E4F                     746              TRAP #15                * print out the value in the data register
000008BA                           747  
000008BA  6000 015E                748              BRA DONE
000008BE                           749              
000008BE                           750  INDIRECT_ADDRESS
000008BE  43F9 00000B53            751              LEA IA_START, A1
000008C4                           752              
000008C4  4280                     753              CLR.L D0
000008C6                           754              
000008C6  103C 000E                755              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
000008CA                           756              
000008CA  4E4F                     757              TRAP #15
000008CC                           758              
000008CC  4281                     759              CLR.L D1
000008CE                           760              
000008CE  1207                     761              MOVE.B D7, D1
000008D0                           762              
000008D0  103C 0003                763              MOVE.B #3, D0
000008D4                           764              
000008D4  4E4F                     765              TRAP #15                * print out the value in the data register
000008D6                           766              
000008D6  43F9 00000B56            767              LEA IA_END, A1
000008DC                           768  
000008DC  4280                     769              CLR.L D0
000008DE                           770              
000008DE  103C 000E                771              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000008E2                           772              
000008E2  4E4F                     773              TRAP #15
000008E4                           774              
000008E4  6000 0134                775              BRA DONE
000008E8                           776  
000008E8                           777  ADDRESS_PI
000008E8  43F9 00000B58            778              LEA A_PI_START, A1
000008EE                           779              
000008EE  4280                     780              CLR.L D0
000008F0                           781              
000008F0  103C 000E                782              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000008F4                           783              
000008F4  4E4F                     784              TRAP #15
000008F6                           785              
000008F6  4281                     786              CLR.L D1
000008F8                           787              
000008F8  1207                     788              MOVE.B D7, D1
000008FA                           789              
000008FA  103C 0003                790              MOVE.B #3, D0
000008FE                           791              
000008FE  4E4F                     792              TRAP #15                * print out the value in the data register
00000900                           793              
00000900  43F9 00000B5B            794              LEA A_PI_END, A1
00000906                           795  
00000906  4280                     796              CLR.L D0
00000908                           797              
00000908  103C 000E                798              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
0000090C                           799     
0000090C  4E4F                     800              TRAP #15
0000090E                           801              
0000090E  6000 010A                802              BRA DONE  
00000912                           803         
00000912                           804  ADDRESS_PD
00000912                           805  
00000912  43F9 00000B5E            806              LEA A_PD_START, A1
00000918                           807              
00000918  4280                     808              CLR.L D0
0000091A                           809              
0000091A  103C 000E                810              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
0000091E                           811              
0000091E  4E4F                     812              TRAP #15
00000920                           813              
00000920  4281                     814              CLR.L D1
00000922                           815              
00000922  1207                     816              MOVE.B D7, D1
00000924                           817              
00000924  103C 0003                818              MOVE.B #3, D0
00000928                           819              
00000928  4E4F                     820              TRAP #15                * print out the value in the data register
0000092A                           821              
0000092A  43F9 00000B62            822              LEA A_PD_END, A1
00000930                           823  
00000930  4280                     824              CLR.L D0
00000932                           825              
00000932  103C 000E                826              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
00000936                           827  
00000936  4E4F                     828              TRAP #15
00000938                           829              
00000938  6000 00E0                830              BRA DONE
0000093C                           831              
0000093C                           832  ADDRESS_W_DISPLACEMENT
0000093C  6000 00DC                833              BRA DONE
00000940                           834  
00000940                           835  ADDRESS_W_INDEX
00000940  6000 00D8                836              BRA DONE
00000944                           837  
00000944                           838  GROUP_111
00000944                           839  
00000944  41F9 00000952            840                 LEA         jmp_table_ea_111,A0    *Index into the table
0000094A                           841  
0000094A  CEFC 0006                842                 MULU        #6,D7       *Form offset     
0000094E                           843  
0000094E  4EF0 7000                844                 JMP         0(A0,D7)   *Jump indirect with index
00000952                           845                 
00000952                           846  jmp_table_ea_111   
00000952  4EF9 00000978            847                 JMP         reg000
00000958                           848  
00000958  4EF9 0000097C            849                 JMP         reg001
0000095E                           850  
0000095E  4EF9 00000970            851                 JMP         reg010
00000964                           852  
00000964  4EF9 00000974            853                 JMP         reg011
0000096A                           854  
0000096A  4EF9 00000980            855                 JMP         reg100
00000970                           856          
00000970                           857  
00000970  6000 0012                858  reg010       BRA         PC_W_DISPLACEMENT
00000974                           859  
00000974  6000 0012                860  reg011       BRA         PC_W_INDEX
00000978                           861  
00000978  6000 0012                862  reg000       BRA         ABSOLUTE_SHORT
0000097C                           863  
0000097C  6000 002C                864  reg001       BRA         ABSOLUTE_LONG
00000980                           865  
00000980  6000 0046                866  reg100       BRA         IMMEDIATE
00000984                           867  
00000984                           868  
00000984                           869  PC_W_DISPLACEMENT
00000984  6000 0094                870              BRA DONE
00000988                           871  
00000988                           872  PC_W_INDEX
00000988  6000 0090                873              BRA DONE
0000098C                           874  
0000098C                           875  ABSOLUTE_SHORT
0000098C  43F9 00000B48            876              LEA         HEX_SIGN, A1
00000992                           877              
00000992  103C 000E                878              MOVE.B      #14, D0
00000996                           879              
00000996  4E4F                     880              TRAP #15
00000998                           881              
00000998  4281                     882              CLR.L       D1
0000099A                           883              
0000099A  221D                     884              MOVE.L      (A5)+, D1
0000099C                           885              
0000099C  103C 000F                886              MOVE.B      #15, D0
000009A0                           887              
000009A0  143C 0010                888              MOVE.B      #16, D2
000009A4                           889              
000009A4  4E4F                     890              TRAP #15
000009A6                           891              
000009A6  6000 0072                892              BRA DONE  
000009AA                           893  
000009AA                           894  
000009AA                           895  ABSOLUTE_LONG
000009AA  43F9 00000B48            896              LEA         HEX_SIGN, A1
000009B0                           897              
000009B0  103C 000E                898              MOVE.B      #14, D0
000009B4                           899              
000009B4  4E4F                     900              TRAP #15
000009B6                           901              
000009B6  4281                     902              CLR.L       D1
000009B8                           903              
000009B8  221D                     904              MOVE.L      (A5)+, D1
000009BA                           905              
000009BA  103C 000F                906              MOVE.B      #15, D0
000009BE                           907              
000009BE  143C 0010                908              MOVE.B      #16, D2
000009C2                           909              
000009C2  4E4F                     910              TRAP #15
000009C4                           911                          
000009C4  6000 0054                912              BRA DONE  
000009C8                           913  
000009C8                           914  
000009C8                           915  IMMEDIATE
000009C8  43F9 00000B46            916              LEA     POUND_SIGN, A1
000009CE                           917              
000009CE  103C 000E                918              MOVE.B  #14, D0
000009D2                           919              
000009D2  4E4F                     920              TRAP #15
000009D4                           921              
000009D4  43F9 00000B48            922              LEA     HEX_SIGN, A1
000009DA                           923              
000009DA  4E4F                     924              TRAP #15
000009DC                           925              
000009DC  BA3C 0000                926              CMP.B   #%00, D5
000009E0                           927              
000009E0  6700 000E                928              BEQ     IMMEDIATE_B
000009E4                           929              
000009E4  BA3C 0001                930              CMP.B   #%01, D5
000009E8                           931              
000009E8  6700 0014                932              BEQ     IMMEDIATE_W
000009EC                           933              
000009EC  6000 001E                934              BRA     IMMEDIATE_L
000009F0                           935              
000009F0                           936  IMMEDIATE_B
000009F0  4285                     937              CLR.L       D5
000009F2                           938     
000009F2  1A1D                     939              MOVE.B      (A5)+, D5
000009F4                           940              
000009F4  4EB9 00000B67            941              JSR         HEX_TO_ASCII
000009FA                           942              
000009FA  6000 001E                943              BRA DONE
000009FE                           944  
000009FE                           945  IMMEDIATE_W
000009FE  4285                     946              CLR.L       D5
00000A00                           947  
00000A00  3A1D                     948              MOVE.W      (A5)+, D5
00000A02                           949              
00000A02  4EB9 00000B67            950              JSR         HEX_TO_ASCII
00000A08                           951              
00000A08                           952              *MOVE.B      #15, D0
00000A08                           953              
00000A08                           954              *MOVE.B      #16, D2
00000A08                           955              
00000A08                           956              *TRAP #15 
00000A08                           957              
00000A08  6000 0010                958              BRA DONE        
00000A0C                           959  
00000A0C                           960  IMMEDIATE_L 
00000A0C  4285                     961              CLR.L       D5
00000A0E                           962      
00000A0E  4EB9 00000B67            963              JSR         HEX_TO_ASCII
00000A14                           964              
00000A14  4E4F                     965              TRAP #15
00000A16                           966              
00000A16  6000 0002                967              BRA DONE
00000A1A                           968  
00000A1A                           969  DONE
00000A1A  4E75                     970      RTS
00000A1C                           971      
00000A1C                           972    INCLUDE 'MESSAGE_Data.X68'
00000A1C                           973  
00000A1C  =0000000D                974  CR  EQU $0D
00000A1C  =0000000A                975  LF  EQU $0A 
00000A1C                           976  
00000A1C= 57 65 6C 63 6F 6D ...    977  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00000A4D= 45 6E 74 65 72 20 ...    978  STARTING        DC.B 'Enter the starting location: ', 0
00000A6B= 45 6E 74 65 72 20 ...    979  ENDING          DC.B 'Enter the ending locaiton: ', 0
00000A87                           980      
00000A87= 41 44 44 49 2E 00        981  ADDI_MESSAGE    DC.B 'ADDI.',0
00000A8D= 4D 4F 56 45 41 2E 00     982  MOVEA_MESSAGE   DC.B 'MOVEA.',0
00000A94= 4D 4F 56 45 2E 00        983  MOVE_MESSAGE    DC.B 'MOVE.',0
00000A9A= 4E 4F 50 00              984  NOP_MESSAGE     DC.B 'NOP',0
00000A9E= 4D 4F 56 45 4D 2E 00     985  MOVEM_MESSAGE   DC.B 'MOVEM.',0
00000AA5= 4A 53 52 00              986  JSR_MESSAGE     DC.B 'JSR',0
00000AA9= 52 54 53 00              987  RTS_MESSAGE     DC.B 'RTS',0
00000AAD= 43 4C 52 00              988  CLR_MESSAGE     DC.B 'CLR',0
00000AB1= 41 44 44 51 2E 00        989  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00000AB7= 42 45 51 00              990  BEQ_MESSAGE     DC.B 'BEQ',0   *//
00000ABB= 42 4E 45 00              991  BNE_MESSAGE     DC.B 'BNE',0   *//
00000ABF= 42 43 53 00              992  BCS_MESSAGE     DC.B 'BCS',0   *//
00000AC3= 42 47 45 00              993  BGE_MESSAGE     DC.B 'BGE',0   *//
00000AC7= 42 47 54 00              994  BGT_MESSAGE     DC.B 'BGT',0   *//
00000ACB= 42 48 49 00              995  BHI_MESSAGE     DC.B 'BHI',0   *//
00000ACF= 42 4C 45 00              996  BLE_MESSAGE     DC.B 'BLE',0   *//
00000AD3= 42 4C 53 00              997  BLS_MESSAGE     DC.B 'BLS',0   *//
00000AD7= 42 4C 54 00              998  BLT_MESSAGE     DC.B 'BLT',0   *//
00000ADB= 42 4D 49 00              999  BMI_MESSAGE     DC.B 'BMI',0   *//
00000ADF= 42 50 4C 00             1000  BPL_MESSAGE     DC.B 'BPL',0   *//
00000AE3= 42 56 43 00             1001  BVC_MESSAGE     DC.B 'BVC',0   *//
00000AE7= 42 56 53 00             1002  BVS_MESSAGE     DC.B 'BVS',0   *//
00000AEB                          1003  
00000AEB= 4D 4F 56 45 51 2E 00    1004  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00000AF2= 44 49 56 55 2E 00       1005  DIVU_MESSAGE    DC.B 'DIVU.',0
00000AF8= 4F 52 2E 00             1006  OR_MESSAGE      DC.B 'OR.',0
00000AFC= 53 55 42 2E 00          1007  SUB_MESSAGE     DC.B 'SUB.',0
00000B01= 43 4D 50 2E 00          1008  CMP_MESSAGE     DC.B 'CMP.',0
00000B06= 4D 55 4C 53 2E 00       1009  MULS_MESSAGE    DC.B 'MULS.',0
00000B0C= 41 4E 44 2E 00          1010  AND_MESSAGE     DC.B 'AND.',0
00000B11= 41 44 44 2E 00          1011  ADD_MESSAGE     DC.B 'ADD.',0
00000B16= 41 44 44 41 2E 00       1012  ADDA_MESSAGE    DC.B 'ADDA.',0
00000B1C= 4C 53 4C 00             1013  LSL_MESSAGE     DC.B 'LSL',0 *//
00000B20= 41 53 4C 00             1014  ASL_MESSAGE     DC.B 'ASL',0
00000B24= 52 4F 4C 00             1015  ROL_MESSAGE     DC.B 'ROL',0
00000B28= 4C 53 52 00             1016  LSR_MESSAGE     DC.B 'LSR',0 *//
00000B2C= 41 53 52 00             1017  ASR_MESSAGE     DC.B 'ASR',0
00000B30= 52 4F 52 00             1018  ROR_MESSAGE     DC.B 'ROR',0
00000B34= 42 20 20 20 20 00       1019  SIZE_B_PRINT    DC.B 'B    ',0
00000B3A= 57 20 20 20 20 00       1020  SIZE_W_PRINT    DC.B 'W    ',0
00000B40= 4C 20 20 20 20 00       1021  SIZE_L_PRINT    DC.B 'L    ',0
00000B46= 23 00                   1022  POUND_SIGN      DC.B '#',0
00000B48= 24 00                   1023  HEX_SIGN        DC.B '$',0
00000B4A= 2E 00                   1024  PERIOD          DC.B '.',0
00000B4C= 20 20 00                1025  SPACE           DC.B '  ',0
00000B4F                          1026  
00000B4F= 44 00                   1027  D_REGISTER      DC.B 'D',0
00000B51= 41 00                   1028  A_REGISTER      DC.B 'A',0
00000B53= 28 41 00                1029  IA_START        DC.B '(A',0
00000B56= 29 00                   1030  IA_END          DC.B ')',0
00000B58= 28 41 00                1031  A_PI_START      DC.B '(A',0
00000B5B= 29 2B 00                1032  A_PI_END        DC.B ')+',0
00000B5E= 2D 28 41 00             1033  A_PD_START      DC.B '-(A',0
00000B62= 29 00                   1034  A_PD_END        DC.B ')',0
00000B64= 2C 20 00                1035  COMMA           DC.B ', ',0
00000B67                          1036  
00000B67                          1037  
00000B67                          1038  
00000B67                          1039  
00000B67                          1040  
00000B67                          1041  
00000B67                          1042  
00000B67                          1043  
00000B67                          1044  
00000B67                          1045  -------------------- end include --------------------
00000B67                          1046    INCLUDE 'HEX_TO_ASCII_V1.X68'
00000B67                          1047      *ORG    $5000
00000B67                          1048  
00000B67                          1049  
00000B67                          1050  HEX_TO_ASCII      
00000B68  4283                    1051       CLR.L      D3
00000B6A                          1052      
00000B6A                          1053       *MOVE.L     #$ABCDEF, D5
00000B6A                          1054       
00000B6A                          1055  LOOP     
00000B6A  2C05                    1056       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00000B6C                          1057       
00000B6C  4282                    1058       CLR.L      D2
00000B6E                          1059       
00000B6E  143C 001C               1060       MOVE.B     #28, D2
00000B72                          1061  
00000B72  E4AE                    1062       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00000B74                          1063       
00000B74  BC3C 000A               1064       CMP.B      #10, D6
00000B78                          1065       
00000B78  6C00 0006               1066       BGE        LETTER                  * determine if a letter or a number
00000B7C                          1067       
00000B7C  6000 000C               1068       BRA        NUMBER
00000B80                          1069       
00000B80                          1070  LETTER
00000B80  0606 0037               1071       ADD.B      #55, D6
00000B84                          1072       
00000B84  1206                    1073       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00000B86                          1074       
00000B86  6000 000C               1075       BRA        PRINTOUT_NIBBLE
00000B8A                          1076  
00000B8A                          1077  NUMBER     
00000B8A  0606 0030               1078       ADD.B      #48, D6
00000B8E                          1079       
00000B8E  1206                    1080       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00000B90                          1081       
00000B90  6000 0002               1082       BRA        PRINTOUT_NIBBLE
00000B94                          1083  
00000B94                          1084  
00000B94                          1085  PRINTOUT_NIBBLE
00000B94  E98D                    1086      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00000B96                          1087      
00000B96  BC3C 0030               1088      CMP.B      #$30, D6
00000B9A                          1089  
00000B9A  67CE                    1090      BEQ        LOOP             
00000B9C                          1091      
00000B9C  103C 0006               1092      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00000BA0                          1093      
00000BA0  4E4F                    1094      TRAP #15
00000BA2                          1095      
00000BA2  5203                    1096      ADD.B      #1, D3                   * add to the counter in D3
00000BA4                          1097       
00000BA4  B63C 0008               1098      CMP.B      #8, D3                   * compare to the counter to check if you are done
00000BA8                          1099       
00000BA8  6700 FE70               1100      BEQ        DONE
00000BAC                          1101          
00000BAC  60BC                    1102      BRA LOOP                            * continue the loop and print next nibble
00000BAE                          1103       
00000BAE                          1104            
00000BAE                          1105  
00000BAE                          1106  
00000BAE                          1107      *SIMHALT             ; halt simulator
00000BAE                          1108  
00000BAE                          1109  
00000BAE                          1110      *END    START       ; last line of source
00000BAE                          1111  
00000BAE                          1112  
00000BAE                          1113  
00000BAE                          1114  -------------------- end include --------------------
00000BAE                          1115       
00000BAE                          1116          
00000BAE                          1117      
00000BAE                          1118                 *END   $400 
00000BAE                          1119  
00000BAE                          1120   
00000BAE                          1121  
00000BAE                          1122  
00000BAE                          1123  
00000BAE                          1124  
00000BAE                          1125  
00000BAE                          1126  
00000BAE                          1127  
00000BAE                          1128  
00000BAE                          1129  -------------------- end include --------------------
00000BAE                          1130                 END   $400 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       9AA
ABSOLUTE_SHORT      98C
ADDA_MESSAGE        B16
ADDI_MESSAGE        A87
ADDQ_MESSAGE        AB1
ADDRESS_PD          912
ADDRESS_PI          8E8
ADDRESS_REGISTER    8A2
ADDRESS_W_DISPLACEMENT  93C
ADDRESS_W_INDEX     940
ADDR_CODE           504
ADD_ADDA            4BE
ADD_CODE            504
ADD_MESSAGE         B11
AND_MESSAGE         B0C
ASD                 614
ASD_MEMORY          67A
ASL                 62E
ASL_MESSAGE         B20
ASR                 654
ASR_MESSAGE         B2C
A_PD_END            B62
A_PD_START          B5E
A_PI_END            B5B
A_PI_START          B58
A_REGISTER          B51
BCS_MESSAGE         ABF
BEQ_MESSAGE         AB7
BGE_MESSAGE         AC3
BGT_MESSAGE         AC7
BHI_MESSAGE         ACB
BLE_MESSAGE         ACF
BLS_MESSAGE         AD3
BLT_MESSAGE         AD7
BMI_MESSAGE         ADB
BNE_MESSAGE         ABB
BPL_MESSAGE         ADF
BVC_MESSAGE         AE3
BVS_MESSAGE         AE7
CLR_MESSAGE         AAD
CMP_MESSAGE         B01
CODE000             866
CODE0000            480
CODE0001            484
CODE001             86A
CODE0010            488
CODE0011            48C
CODE010             86E
CODE0100            490
CODE0101            494
CODE011             872
CODE0110            498
CODE0111            49C
CODE100             876
CODE1000            4A0
CODE1001            4A4
CODE101             87A
CODE1010            4A8
CODE1011            4AC
CODE110             87E
CODE1100            4AE
CODE1101            4B2
CODE111             882
CODE1110            4B6
CODE1111            4BA
COMMA               B64
CR                  D
DATA_REGISTER       886
DIVU_MESSAGE        AF2
DONE                A1A
D_REGISTER          B4F
ENDING              A6B
EXAMPLE             E64A
GROUP_111           944
HEX_SIGN            B48
HEX_TO_ASCII        B67
IA_END              B56
IA_START            B53
IMMEDIATE           9C8
IMMEDIATE_B         9F0
IMMEDIATE_L         A0C
IMMEDIATE_W         9FE
INDIRECT_ADDRESS    8BE
JMP_TABLE           420
JMP_TABLE_EA        836
JMP_TABLE_EA_111    952
JSR_MESSAGE         AA5
LETTER              B80
LF                  A
LOOP                B6A
LSD                 504
LSD_MEMORY          582
LSL                 536
LSL_MESSAGE         B1C
LSR                 55C
LSR_MESSAGE         B28
MOVEAL              80E
MOVEAW              7F4
MOVEA_MESSAGE       A8D
MOVEB               776
MOVEL               7C2
MOVEM_MESSAGE       A9E
MOVEQ_MESSAGE       AEB
MOVEW               790
MOVE_MESSAGE        A94
MULS_MESSAGE        B06
NOP_MESSAGE         A9A
NUMBER              B8A
OR_MESSAGE          AF8
PC_W_DISPLACEMENT   984
PC_W_INDEX          988
PERIOD              B4A
POUND_SIGN          B46
PRINTOUT_COUNT      6AE
PRINTOUT_MEMORY_SHIFTS_EA  73E
PRINTOUT_NIBBLE     B94
PRINTOUT_REGISTER   6FA
PRINTOUT_REGISTER_SHIFTS_EA  684
PRINT_EA            828
REG000              978
REG001              97C
REG010              970
REG011              974
REG100              980
ROD                 58C
ROD_MEMORY          60A
ROL                 5BE
ROL_MESSAGE         B24
ROR                 5E4
ROR_MESSAGE         B30
RTS_MESSAGE         AA9
SHIFT               C
SHIFTS              4E0
SIZE_B_PRINT        B34
SIZE_L_PRINT        B40
SIZE_W_PRINT        B3A
SPACE               B4C
STACK               A000
START               400
STARTING            A4D
SUB_MESSAGE         AFC
WELCOME_MESSAGE     A1C
