00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/22/2016 11:46:43 PM

00000000                             1   *ORG     $400
00000000                             2  
00000000                             3  * D6 is mode, D7 is register 
00000000                             4  * Dn, An, (An), (An)+, -(An)
00000000                             5  * Jumps based on mode
00000000                             6  * USING A5 AS THE ADDRESS REGISTER HOLDING CURRENT ADDRESS OF PROGRESS
00000000                             7  
00000000                             8  * Consider the next instruction. Why do we have to multiply the index 
00000000                             9  
00000000                            10  * by 6? How many bytes does a single jump table entry require? 
00000000                            11  
00000000                            12  
00000000                            13  *start 
00000000                            14                 *MOVE.B       #%00, D5
00000000                            15                
00000000                            16                 *MOVE.B       #%111,D6         *MODE
00000000                            17                 
00000000                            18                 *MOVE.B       #%100,D7         *REGISTER
00000000                            19                 
00000000                            20                 *MOVE.L       #$4000, A5
00000000                            21  
00000000                            22                 *MOVE.B       #$0040, (A5)   
00000000                            23                 
00000000  41F9 0000000E             24                 LEA     jmp_table_ea,A0      *Index into the table
00000006                            25  
00000006  CCFC 0006                 26                 MULU        #6,D6            *Form offset     
0000000A                            27  
0000000A  4EF0 6000                 28                 JMP         0(A0,D6)         *Jump indirect with index
0000000E                            29   
0000000E                            30  
0000000E  4EF9 0000003E             31  jmp_table_ea   JMP         code000
00000014                            32  
00000014  4EF9 00000042             33                 JMP         code001
0000001A                            34  
0000001A  4EF9 00000046             35                 JMP         code010
00000020                            36  
00000020  4EF9 0000004A             37                 JMP         code011
00000026                            38  
00000026  4EF9 0000004E             39                 JMP         code100
0000002C                            40  
0000002C  4EF9 00000052             41                 JMP         code101
00000032                            42  
00000032  4EF9 00000056             43                 JMP         code110
00000038                            44  
00000038  4EF9 0000005A             45                 JMP         code111
0000003E                            46          
0000003E                            47  
0000003E                            48   
0000003E                            49  
0000003E                            50  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000003E                            51  
0000003E                            52   
0000003E                            53  
0000003E                            54   
0000003E                            55  
0000003E  6000 001E                 56  code000       BRA         DATA_REGISTER
00000042                            57  
00000042  6000 0036                 58  code001       BRA         ADDRESS_REGISTER
00000046                            59  
00000046  6000 004E                 60  code010       BRA         INDIRECT_ADDRESS
0000004A                            61  
0000004A  6000 0074                 62  code011       BRA         ADDRESS_PI    * post increment
0000004E                            63  
0000004E  6000 009A                 64  code100       BRA         ADDRESS_PD    * pre decrement
00000052                            65  
00000052  6000 00C0                 66  code101       BRA         ADDRESS_W_DISPLACEMENT
00000056                            67  
00000056  6000 00C0                 68  code110       BRA         ADDRESS_W_INDEX
0000005A                            69  
0000005A  6000 00C0                 70  code111       BRA         GROUP_111
0000005E                            71  
0000005E                            72   
0000005E                            73  DATA_REGISTER
0000005E                            74  
0000005E  43F9 00000324             75              LEA D_REGISTER, A1
00000064                            76              
00000064  4280                      77              CLR.L D0
00000066                            78              
00000066  103C 000E                 79              MOVE.B #14, D0
0000006A                            80              
0000006A  4E4F                      81              TRAP #15                * print out 'D' for data register
0000006C                            82              
0000006C  4281                      83              CLR.L D1
0000006E                            84              
0000006E  1207                      85              MOVE.B D7, D1
00000070                            86              
00000070  103C 0003                 87              MOVE.B #3, D0           * print out the number in the register
00000074                            88              
00000074  4E4F                      89              TRAP #15
00000076                            90              
00000076  6000 017A                 91              BRA DONE
0000007A                            92              
0000007A                            93  
0000007A                            94  ADDRESS_REGISTER
0000007A  43F9 00000326             95              LEA A_REGISTER, A1
00000080                            96              
00000080  4280                      97              CLR.L D0
00000082                            98              
00000082  103C 000E                 99              MOVE.B #14, D0          * print out the 'A' for address register
00000086                           100              
00000086  4E4F                     101              TRAP #15
00000088                           102              
00000088  4281                     103              CLR.L D1
0000008A                           104              
0000008A  1207                     105              MOVE.B D7, D1
0000008C                           106              
0000008C  103C 0003                107              MOVE.B #3, D0
00000090                           108              
00000090  4E4F                     109              TRAP #15                * print out the value in the data register
00000092                           110  
00000092  6000 015E                111              BRA DONE
00000096                           112              
00000096                           113  INDIRECT_ADDRESS
00000096  43F9 00000328            114              LEA IA_START, A1
0000009C                           115              
0000009C  4280                     116              CLR.L D0
0000009E                           117              
0000009E  103C 000E                118              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
000000A2                           119              
000000A2  4E4F                     120              TRAP #15
000000A4                           121              
000000A4  4281                     122              CLR.L D1
000000A6                           123              
000000A6  1207                     124              MOVE.B D7, D1
000000A8                           125              
000000A8  103C 0003                126              MOVE.B #3, D0
000000AC                           127              
000000AC  4E4F                     128              TRAP #15                * print out the value in the data register
000000AE                           129              
000000AE  43F9 0000032B            130              LEA IA_END, A1
000000B4                           131  
000000B4  4280                     132              CLR.L D0
000000B6                           133              
000000B6  103C 000E                134              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000000BA                           135              
000000BA  4E4F                     136              TRAP #15
000000BC                           137              
000000BC  6000 0134                138              BRA DONE
000000C0                           139  
000000C0                           140  ADDRESS_PI
000000C0  43F9 0000032D            141              LEA A_PI_START, A1
000000C6                           142              
000000C6  4280                     143              CLR.L D0
000000C8                           144              
000000C8  103C 000E                145              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000000CC                           146              
000000CC  4E4F                     147              TRAP #15
000000CE                           148              
000000CE  4281                     149              CLR.L D1
000000D0                           150              
000000D0  1207                     151              MOVE.B D7, D1
000000D2                           152              
000000D2  103C 0003                153              MOVE.B #3, D0
000000D6                           154              
000000D6  4E4F                     155              TRAP #15                * print out the value in the data register
000000D8                           156              
000000D8  43F9 00000330            157              LEA A_PI_END, A1
000000DE                           158  
000000DE  4280                     159              CLR.L D0
000000E0                           160              
000000E0  103C 000E                161              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
000000E4                           162     
000000E4  4E4F                     163              TRAP #15
000000E6                           164              
000000E6  6000 010A                165              BRA DONE  
000000EA                           166         
000000EA                           167  ADDRESS_PD
000000EA                           168  
000000EA  43F9 00000333            169              LEA A_PD_START, A1
000000F0                           170              
000000F0  4280                     171              CLR.L D0
000000F2                           172              
000000F2  103C 000E                173              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000000F6                           174              
000000F6  4E4F                     175              TRAP #15
000000F8                           176              
000000F8  4281                     177              CLR.L D1
000000FA                           178              
000000FA  1207                     179              MOVE.B D7, D1
000000FC                           180              
000000FC  103C 0003                181              MOVE.B #3, D0
00000100                           182              
00000100  4E4F                     183              TRAP #15                * print out the value in the data register
00000102                           184              
00000102  43F9 00000337            185              LEA A_PD_END, A1
00000108                           186  
00000108  4280                     187              CLR.L D0
0000010A                           188              
0000010A  103C 000E                189              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
0000010E                           190  
0000010E  4E4F                     191              TRAP #15
00000110                           192              
00000110  6000 00E0                193              BRA DONE
00000114                           194              
00000114                           195  ADDRESS_W_DISPLACEMENT
00000114  6000 00DC                196              BRA DONE
00000118                           197  
00000118                           198  ADDRESS_W_INDEX
00000118  6000 00D8                199              BRA DONE
0000011C                           200  
0000011C                           201  GROUP_111
0000011C                           202  
0000011C  41F9 0000012A            203                 LEA         jmp_table_ea_111,A0    *Index into the table
00000122                           204  
00000122  CEFC 0006                205                 MULU        #6,D7       *Form offset     
00000126                           206  
00000126  4EF0 7000                207                 JMP         0(A0,D7)   *Jump indirect with index
0000012A                           208                 
0000012A                           209  jmp_table_ea_111   
0000012A  4EF9 00000150            210                 JMP         reg000
00000130                           211  
00000130  4EF9 00000154            212                 JMP         reg001
00000136                           213  
00000136  4EF9 00000148            214                 JMP         reg010
0000013C                           215  
0000013C  4EF9 0000014C            216                 JMP         reg011
00000142                           217  
00000142  4EF9 00000158            218                 JMP         reg100
00000148                           219          
00000148                           220  
00000148  6000 0012                221  reg010       BRA         PC_W_DISPLACEMENT
0000014C                           222  
0000014C  6000 0012                223  reg011       BRA         PC_W_INDEX
00000150                           224  
00000150  6000 0012                225  reg000       BRA         ABSOLUTE_SHORT
00000154                           226  
00000154  6000 002C                227  reg001       BRA         ABSOLUTE_LONG
00000158                           228  
00000158  6000 0046                229  reg100       BRA         IMMEDIATE
0000015C                           230  
0000015C                           231  
0000015C                           232  PC_W_DISPLACEMENT
0000015C  6000 0094                233              BRA DONE
00000160                           234  
00000160                           235  PC_W_INDEX
00000160  6000 0090                236              BRA DONE
00000164                           237  
00000164                           238  ABSOLUTE_SHORT
00000164  43F9 00000320            239              LEA         HEX_SIGN, A1
0000016A                           240              
0000016A  103C 000E                241              MOVE.B      #14, D0
0000016E                           242              
0000016E  4E4F                     243              TRAP #15
00000170                           244              
00000170  4281                     245              CLR.L       D1
00000172                           246              
00000172  221D                     247              MOVE.L      (A5)+, D1
00000174                           248              
00000174  103C 000F                249              MOVE.B      #15, D0
00000178                           250              
00000178  143C 0010                251              MOVE.B      #16, D2
0000017C                           252              
0000017C  4E4F                     253              TRAP #15
0000017E                           254              
0000017E  6000 0072                255              BRA DONE  
00000182                           256  
00000182                           257  
00000182                           258  ABSOLUTE_LONG
00000182  43F9 00000320            259              LEA         HEX_SIGN, A1
00000188                           260              
00000188  103C 000E                261              MOVE.B      #14, D0
0000018C                           262              
0000018C  4E4F                     263              TRAP #15
0000018E                           264              
0000018E  4281                     265              CLR.L       D1
00000190                           266              
00000190  221D                     267              MOVE.L      (A5)+, D1
00000192                           268              
00000192  103C 000F                269              MOVE.B      #15, D0
00000196                           270              
00000196  143C 0010                271              MOVE.B      #16, D2
0000019A                           272              
0000019A  4E4F                     273              TRAP #15
0000019C                           274                          
0000019C  6000 0054                275              BRA DONE  
000001A0                           276  
000001A0                           277  
000001A0                           278  IMMEDIATE
000001A0  43F9 0000031E            279              LEA     POUND_SIGN, A1
000001A6                           280              
000001A6  103C 000E                281              MOVE.B  #14, D0
000001AA                           282              
000001AA  4E4F                     283              TRAP #15
000001AC                           284              
000001AC  43F9 00000320            285              LEA     HEX_SIGN, A1
000001B2                           286              
000001B2  4E4F                     287              TRAP #15
000001B4                           288              
000001B4  BA3C 0000                289              CMP.B   #%00, D5
000001B8                           290              
000001B8  6700 000E                291              BEQ     IMMEDIATE_B
000001BC                           292              
000001BC  BA3C 0001                293              CMP.B   #%01, D5
000001C0                           294              
000001C0  6700 0014                295              BEQ     IMMEDIATE_W
000001C4                           296              
000001C4  6000 001E                297              BRA     IMMEDIATE_L
000001C8                           298              
000001C8                           299  IMMEDIATE_B
000001C8  4285                     300              CLR.L       D5
000001CA                           301     
000001CA  1A1D                     302              MOVE.B      (A5)+, D5
000001CC                           303              
000001CC  4EB9 0000033C            304              JSR         HEX_TO_ASCII
000001D2                           305              
000001D2  6000 001E                306              BRA DONE
000001D6                           307  
000001D6                           308  IMMEDIATE_W
000001D6  4285                     309              CLR.L       D5
000001D8                           310  
000001D8  3A1D                     311              MOVE.W      (A5)+, D5
000001DA                           312              
000001DA  4EB9 0000033C            313              JSR         HEX_TO_ASCII
000001E0                           314              
000001E0                           315              *MOVE.B      #15, D0
000001E0                           316              
000001E0                           317              *MOVE.B      #16, D2
000001E0                           318              
000001E0                           319              *TRAP #15 
000001E0                           320              
000001E0  6000 0010                321              BRA DONE        
000001E4                           322  
000001E4                           323  IMMEDIATE_L 
000001E4  4285                     324              CLR.L       D5
000001E6                           325      
000001E6  4EB9 0000033C            326              JSR         HEX_TO_ASCII
000001EC                           327              
000001EC  4E4F                     328              TRAP #15
000001EE                           329              
000001EE  6000 0002                330              BRA DONE
000001F2                           331  
000001F2                           332  DONE
000001F2  4E75                     333      RTS
000001F4                           334      
000001F4                           335    INCLUDE 'MESSAGE_Data.X68'
000001F4                           336  
000001F4  =0000000D                337  CR  EQU $0D
000001F4  =0000000A                338  LF  EQU $0A 
000001F4                           339  
000001F4= 57 65 6C 63 6F 6D ...    340  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00000225= 45 6E 74 65 72 20 ...    341  STARTING        DC.B 'Enter the starting location: ', 0
00000243= 45 6E 74 65 72 20 ...    342  ENDING          DC.B 'Enter the ending locaiton: ', 0
0000025F                           343      
0000025F= 41 44 44 49 2E 00        344  ADDI_MESSAGE    DC.B 'ADDI.',0
00000265= 4D 4F 56 45 41 2E 00     345  MOVEA_MESSAGE   DC.B 'MOVEA.',0
0000026C= 4D 4F 56 45 2E 00        346  MOVE_MESSAGE    DC.B 'MOVE.',0
00000272= 4E 4F 50 00              347  NOP_MESSAGE     DC.B 'NOP',0
00000276= 4D 4F 56 45 4D 2E 00     348  MOVEM_MESSAGE   DC.B 'MOVEM.',0
0000027D= 4A 53 52 00              349  JSR_MESSAGE     DC.B 'JSR',0
00000281= 52 54 53 00              350  RTS_MESSAGE     DC.B 'RTS',0
00000285= 43 4C 52 00              351  CLR_MESSAGE     DC.B 'CLR',0
00000289= 41 44 44 51 2E 00        352  ADDQ_MESSAGE    DC.B 'ADDQ.',0
0000028F= 42 45 51 00              353  BEQ_MESSAGE     DC.B 'BEQ',0   *//
00000293= 42 4E 45 00              354  BNE_MESSAGE     DC.B 'BNE',0   *//
00000297= 42 43 53 00              355  BCS_MESSAGE     DC.B 'BCS',0   *//
0000029B= 42 47 45 00              356  BGE_MESSAGE     DC.B 'BGE',0   *//
0000029F= 42 47 54 00              357  BGT_MESSAGE     DC.B 'BGT',0   *//
000002A3= 42 48 49 00              358  BHI_MESSAGE     DC.B 'BHI',0   *//
000002A7= 42 4C 45 00              359  BLE_MESSAGE     DC.B 'BLE',0   *//
000002AB= 42 4C 53 00              360  BLS_MESSAGE     DC.B 'BLS',0   *//
000002AF= 42 4C 54 00              361  BLT_MESSAGE     DC.B 'BLT',0   *//
000002B3= 42 4D 49 00              362  BMI_MESSAGE     DC.B 'BMI',0   *//
000002B7= 42 50 4C 00              363  BPL_MESSAGE     DC.B 'BPL',0   *//
000002BB= 42 56 43 00              364  BVC_MESSAGE     DC.B 'BVC',0   *//
000002BF= 42 56 53 00              365  BVS_MESSAGE     DC.B 'BVS',0   *//
000002C3                           366  
000002C3= 4D 4F 56 45 51 2E 00     367  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
000002CA= 44 49 56 55 2E 00        368  DIVU_MESSAGE    DC.B 'DIVU.',0
000002D0= 4F 52 2E 00              369  OR_MESSAGE      DC.B 'OR.',0
000002D4= 53 55 42 2E 00           370  SUB_MESSAGE     DC.B 'SUB.',0
000002D9= 43 4D 50 2E 00           371  CMP_MESSAGE     DC.B 'CMP.',0
000002DE= 4D 55 4C 53 2E 00        372  MULS_MESSAGE    DC.B 'MULS.',0
000002E4= 41 4E 44 2E 00           373  AND_MESSAGE     DC.B 'AND.',0
000002E9= 41 44 44 2E 00           374  ADD_MESSAGE     DC.B 'ADD.',0
000002EE= 41 44 44 41 2E 00        375  ADDA_MESSAGE    DC.B 'ADDA.',0
000002F4= 4C 53 4C 00              376  LSL_MESSAGE     DC.B 'LSL',0 *//
000002F8= 41 53 4C 00              377  ASL_MESSAGE     DC.B 'ASL',0
000002FC= 52 4F 4C 00              378  ROL_MESSAGE     DC.B 'ROL',0
00000300= 4C 53 52 00              379  LSR_MESSAGE     DC.B 'LSR',0 *//
00000304= 41 53 52 00              380  ASR_MESSAGE     DC.B 'ASR',0
00000308= 52 4F 52 00              381  ROR_MESSAGE     DC.B 'ROR',0
0000030C= 42 20 20 20 20 00        382  SIZE_B_PRINT    DC.B 'B    ',0
00000312= 57 20 20 20 20 00        383  SIZE_W_PRINT    DC.B 'W    ',0
00000318= 4C 20 20 20 20 00        384  SIZE_L_PRINT    DC.B 'L    ',0
0000031E= 23 00                    385  POUND_SIGN      DC.B '#',0
00000320= 24 00                    386  HEX_SIGN        DC.B '$',0
00000322= 2E 00                    387  PERIOD          DC.B '.',0
00000324                           388  
00000324= 44 00                    389  D_REGISTER      DC.B 'D',0
00000326= 41 00                    390  A_REGISTER      DC.B 'A',0
00000328= 28 41 00                 391  IA_START        DC.B '(A',0
0000032B= 29 00                    392  IA_END          DC.B ')',0
0000032D= 28 41 00                 393  A_PI_START      DC.B '(A',0
00000330= 29 2B 00                 394  A_PI_END        DC.B ')+',0
00000333= 2D 28 41 00              395  A_PD_START      DC.B '-(A',0
00000337= 29 00                    396  A_PD_END        DC.B ')',0
00000339= 2C 20 00                 397  COMMA           DC.B ', ',0
0000033C                           398  
0000033C                           399  
0000033C                           400  
0000033C                           401  
0000033C                           402  
0000033C                           403  
0000033C                           404  
0000033C                           405  
0000033C                           406  -------------------- end include --------------------
0000033C                           407    INCLUDE 'HEX_TO_ASCII_V1.X68'
0000033C                           408      *ORG    $5000
0000033C                           409  
0000033C                           410  
0000033C                           411  HEX_TO_ASCII      
0000033C  4283                     412       CLR.L      D3
0000033E                           413      
0000033E                           414       *MOVE.L     #$ABCDEF, D5
0000033E                           415       
0000033E                           416  LOOP     
0000033E  2C05                     417       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00000340                           418       
00000340  4282                     419       CLR.L      D2
00000342                           420       
00000342  143C 001C                421       MOVE.B     #28, D2
00000346                           422  
00000346  E4AE                     423       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00000348                           424       
00000348  BC3C 000A                425       CMP.B      #10, D6
0000034C                           426       
0000034C  6C00 0006                427       BGE        LETTER                  * determine if a letter or a number
00000350                           428       
00000350  6000 000C                429       BRA        NUMBER
00000354                           430       
00000354                           431  LETTER
00000354  0606 0037                432       ADD.B      #55, D6
00000358                           433       
00000358  1206                     434       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000035A                           435       
0000035A  6000 000C                436       BRA        PRINTOUT_NIBBLE
0000035E                           437  
0000035E                           438  NUMBER     
0000035E  0606 0030                439       ADD.B      #48, D6
00000362                           440       
00000362  1206                     441       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00000364                           442       
00000364  6000 0002                443       BRA        PRINTOUT_NIBBLE
00000368                           444  
00000368                           445  
00000368                           446  PRINTOUT_NIBBLE
00000368  E98D                     447      LSL.L      #4, D5                   * shift out the nibble you just read from the source
0000036A                           448      
0000036A  BC3C 0030                449      CMP.B      #$30, D6
0000036E                           450  
0000036E  67CE                     451      BEQ        LOOP             
00000370                           452      
00000370  103C 0006                453      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00000374                           454      
00000374  4E4F                     455      TRAP #15
00000376                           456      
00000376  5203                     457      ADD.B      #1, D3                   * add to the counter in D3
00000378                           458       
00000378  B63C 0008                459      CMP.B      #8, D3                   * compare to the counter to check if you are done
0000037C                           460       
0000037C  6700 FE74                461      BEQ        DONE
00000380                           462          
00000380  60BC                     463      BRA LOOP                            * continue the loop and print next nibble
00000382                           464       
00000382                           465            
00000382                           466  
00000382                           467  
00000382                           468      *SIMHALT             ; halt simulator
00000382                           469  
00000382                           470  
00000382                           471      *END    START       ; last line of source
00000382                           472  
00000382                           473  
00000382                           474  
00000382                           475  -------------------- end include --------------------
00000382                           476       
00000382                           477          
00000382                           478      
00000382                           479                 *END   $400 
00000382                           480  
00000382                           481   
00000382                           482  
00000382                           483  
00000382                           484  
00000382                           485  
00000382                           486  
00000382                           487  
00000382                           488  
Line 489 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       182
ABSOLUTE_SHORT      164
ADDA_MESSAGE        2EE
ADDI_MESSAGE        25F
ADDQ_MESSAGE        289
ADDRESS_PD          EA
ADDRESS_PI          C0
ADDRESS_REGISTER    7A
ADDRESS_W_DISPLACEMENT  114
ADDRESS_W_INDEX     118
ADD_MESSAGE         2E9
AND_MESSAGE         2E4
ASL_MESSAGE         2F8
ASR_MESSAGE         304
A_PD_END            337
A_PD_START          333
A_PI_END            330
A_PI_START          32D
A_REGISTER          326
BCS_MESSAGE         297
BEQ_MESSAGE         28F
BGE_MESSAGE         29B
BGT_MESSAGE         29F
BHI_MESSAGE         2A3
BLE_MESSAGE         2A7
BLS_MESSAGE         2AB
BLT_MESSAGE         2AF
BMI_MESSAGE         2B3
BNE_MESSAGE         293
BPL_MESSAGE         2B7
BVC_MESSAGE         2BB
BVS_MESSAGE         2BF
CLR_MESSAGE         285
CMP_MESSAGE         2D9
CODE000             3E
CODE001             42
CODE010             46
CODE011             4A
CODE100             4E
CODE101             52
CODE110             56
CODE111             5A
COMMA               339
CR                  D
DATA_REGISTER       5E
DIVU_MESSAGE        2CA
DONE                1F2
D_REGISTER          324
ENDING              243
GROUP_111           11C
HEX_SIGN            320
HEX_TO_ASCII        33C
IA_END              32B
IA_START            328
IMMEDIATE           1A0
IMMEDIATE_B         1C8
IMMEDIATE_L         1E4
IMMEDIATE_W         1D6
INDIRECT_ADDRESS    96
JMP_TABLE_EA        E
JMP_TABLE_EA_111    12A
JSR_MESSAGE         27D
LETTER              354
LF                  A
LOOP                33E
LSL_MESSAGE         2F4
LSR_MESSAGE         300
MOVEA_MESSAGE       265
MOVEM_MESSAGE       276
MOVEQ_MESSAGE       2C3
MOVE_MESSAGE        26C
MULS_MESSAGE        2DE
NOP_MESSAGE         272
NUMBER              35E
OR_MESSAGE          2D0
PC_W_DISPLACEMENT   15C
PC_W_INDEX          160
PERIOD              322
POUND_SIGN          31E
PRINTOUT_NIBBLE     368
REG000              150
REG001              154
REG010              148
REG011              14C
REG100              158
ROL_MESSAGE         2FC
ROR_MESSAGE         308
RTS_MESSAGE         281
SIZE_B_PRINT        30C
SIZE_L_PRINT        318
SIZE_W_PRINT        312
STARTING            225
SUB_MESSAGE         2D4
WELCOME_MESSAGE     1F4
